{"version":3,"file":"sw.5f866a1dfe94a21b8521.chunk.js","mappings":"uBAAIA,ECEIC,EACAC,EACAC,EACAC,ECLJC,E,0ECQG,MAAMC,EAAaC,UAAYA,UAAUC,UAAY,KAU/CC,GATWF,UAAUC,UAAUE,OAAO,yBACzBH,UAAUC,UAAUG,cAAcC,QAAQ,WACzC,SAASC,KAAKN,UAAUC,YAAc,aAAaK,KAAKN,UAAUO,SAG7D,mBAAmBD,KAAKN,UAAUQ,WACxC,aAAvBR,UAAUQ,UAA2BR,UAAUS,eAAiB,IAC/D,gBAEwB,oBAAuBV,KAAe,yBAAyBO,KAAKP,IAAkBA,EAAWW,MAAM,YAAcX,EAAWW,MAAM,aACrJC,EAAaX,UAAUC,UAAUG,cAAcC,QAAQ,YAAc,EAIbL,UAAUS,eAAiB,GAAKT,UAAUC,UAAUE,OAAO,mH,4DChBzH,MAAMS,EAAwD,oBAA7BC,0BAA4CC,gBAAgBD,yBACvFE,EAA6C,oBAAtBC,mBAAqCF,gBAAgBE,oBAAsBJ,EAClGK,EAAYF,GAAiBH,EAE7BM,EAAmB,IACtBJ,KACPK,QACAC,SAAS,CAACC,qBAAqB,EAAOC,KAAM,WAKzCC,EAAc,CAACC,KAAwDC,KAC3E,IAEED,EAASD,eAAeE,GACxB,MAAMC,GACNC,QAAQC,MAAM,8BAA+BF,EAAKD,KAIhDI,EAAsB,CAACC,KAAiBL,KAC5CP,IAAmBa,MAAMC,IACnBA,EAAUC,QAKdD,EAAUE,MAAMJ,EAAM,GAAK,GAAGK,SAASX,IACrCD,EAAYC,KAAaC,UAWFb,GAAoBiB,EAAoBO,KAAK,MAAM,GACvDxB,GAAoBiB,EAAoBO,KAAK,MAAM,I,8CCrChEC,E,wCAAZ,SAAYA,GACV,mBACA,qBACA,mBACA,iBACA,qBALF,CAAYA,IAAAA,EAAQ,KAQb,MAAMC,EAAa,CAACD,EAASE,KAAMF,EAASG,MAAOH,EAASI,KAAMJ,EAASK,IAAKL,EAASM,OAmB1FC,IAjBY,EAAA1C,WAAa,EAAAS,YA8BlBkC,EAaD,QAbCA,EAgBH,QAiCJC,EAA0I,CAC9I,CAAC,QAAST,EAASM,OACnB,CAAC,OAAQN,EAASK,KAClB,CAAC,OAAQL,EAASI,MAClB,CAAC,QAASJ,EAASG,OACnB,CAAC,SAAUH,EAASG,OACpB,CAAC,QAASH,EAASK,KACnB,CAAC,QAASL,EAASK,KACnB,CAAC,iBAAkBL,EAASK,KAC5B,CAAC,WAAYL,EAASK,MAIjB,SAASK,EAAOC,EAAgB1B,EAAiBe,EAASK,IAAML,EAASI,KAAOJ,EAASG,MAAOS,GAAmB,EAAOC,EAAQ,IACvI,IAAIC,EACA,MAAUF,IACZ3B,EAAOe,EAASG,OAGdI,EAEOM,IACN,KAAmBA,EAAQL,EACtB,OAAeK,EAAQL,IAH/BK,EAAQ,GAMV,MAAME,EAAgBF,EACZA,EAAPA,EAAe,MAAMA,MACX,KAIb,MAAMG,EAAc,YAAY5B,GAC9B,OAAOH,EAAOe,EAASK,KAAOf,QAAQ0B,IAAIH,GAAO,SAAMF,KAA0CvB,IAwBnG,OArBAqB,EAAQX,SAAQ,EAAEmB,EAAQC,MACxBF,EAAIC,GAAU,YAAY7B,GACxB,OAAOH,EAAOiC,GAAW5B,QAAQ2B,GAAQJ,GAAO,SAAMF,KAA0CvB,OAIpG4B,EAAIG,UAAY,SAASC,GACvBN,EAAiBM,EACjBT,EAAS,IAAMS,EAAY,KAG7BJ,EAAIG,UAAUR,GAEdK,EAAIK,SAAW,SAASC,GACtBrC,EAAOgB,EAAWJ,MAAM,EAAGyB,EAAQ,GAAGC,QAAO,CAACC,EAAKC,IAAMD,EAAMC,GAAG,IAGpET,EAAIU,WAAa,SAASf,GACxB,OAAOD,EAAO,GAAGI,OAAoBH,IAAU1B,EAAM2B,EAAkBG,IAGlEC,I,iEC7JM,SAASW,EAAMC,GAC5B,OAAO,IAAIC,SAAeC,IACxBC,WAAWD,EAASF,MCMxB,MAAMI,EAAMvD,KACCwD,EAAoB,eAEjC,SAASC,EAAkBC,GACzB,OAAOA,EAASC,IAA0B,MAApBD,EAASE,OAGjC,SAASC,EAAoCC,GAC3C,OAAOV,QAAQW,KAAK,CAClBD,EACAZ,EAAM,KAAOjC,MAAK,IAAMmC,QAAQY,aClBrB,SAASC,KCuBT,SAASC,IACtB,MAAMC,EAAsB,CAC1BC,aAAa,EACbC,YAAY,EAEZC,OAAQ,OACRC,UAAW,IAAI5D,KACbwD,EAAeK,WAAa7D,EAC5BwD,EAAejD,UAAUG,SAASoD,GAAkBA,KAAY9D,MAGlEO,UAAW,GACXwD,kBAAoBD,IACfN,EAAeK,YAChBC,KAAYN,EAAeK,YAG7BL,EAAejD,UAAUyD,KAAKF,KAI5B9F,EAAkC,IAAIyE,SAAW,CAACC,EAASW,KAC/DG,EAAed,QAAWuB,IACrBjG,EAASyF,aAAezF,EAAS0F,aAEpC1F,EAASyF,aAAc,EACvBf,EAAQuB,KAGVT,EAAeH,OAAS,IAAIrD,KACvBhC,EAAS0F,YAAc1F,EAASyF,cAEnCzF,EAAS0F,YAAa,EACtBL,KAAUrD,QAqBd,OAXAhC,EAASkG,MAAMZ,GAAMa,SAAQ,KAC3BnG,EAAS2F,OAAS3F,EAAS4F,UAAY5F,EAAS6F,WAAa,KAC7D7F,EAASuC,UAAUC,OAAS,EAEzBxC,EAASoG,SACVpG,EAASoG,OAASd,MAItBe,OAAOC,OAAOtG,EAAUwF,GAEjBxF,E,wBChEM,SAASuG,EAA6CC,EAAyBC,EAAmB,IAC3GC,MAAMC,QAAQH,KAChBA,EAAY,CAACA,IAGf,MAAMI,ECNO,SAA0BH,GACvC,OAgByB,IAhBtB,CACD,aACA,YACA,YACA,gBACA,aACA,YACA,YACA,aACA,kBACA,YACA,aACA,YACA,YACA,mBACA,mBACA7F,QAAQ6F,GACD,2BAGFA,EDfcI,CAAiBJ,GAEtC,OADa,IAAIK,KAAKN,EAAW,CAAC3E,KAAM+E,IEV3B,MAAMG,EAGnBC,YACUP,EACAQ,EACAC,GAFA,KAAAT,SAAAA,EACA,KAAAQ,KAAAA,EACA,KAAAC,iBAAAA,EAERC,KAAKC,MAAQ,IAAIC,WAAWJ,GAGjBK,MAAMC,EAAkBC,G,qCAEnC,MAAMC,EAAYD,EAASD,EAAKG,WAChC,GAAGD,EAAYN,KAAKC,MAAMM,WAAY,CACpC,MAAMC,EAAW,IAAIN,WAAWI,GAChCE,EAASC,IAAIT,KAAKC,MAAO,GACzBD,KAAKC,MAAQO,EAGfR,KAAKC,MAAMQ,IAAIL,EAAMC,I,+RAGhBK,WACLV,KAAKC,MAAQ,IAAIC,WAGZS,KAAKb,GACVE,KAAKC,MAAQD,KAAKC,MAAM3E,MAAM,EAAGwE,GAG5Bc,SAASC,GAAgB,GAC9B,MAAMC,EAAO1B,EAAcY,KAAKC,MAAOD,KAAKV,UAM5C,OAJGuB,GAAiBb,KAAKD,kBACvBC,KAAKD,iBAAiBe,GAGjBA,EAGFC,WACL,OAAOf,KAAKC,MAGPe,aAAaC,GAClBjB,KAAKC,MAAQgB,G,cCvCF,MAAMC,EAQnBrB,YAAoBsB,GAAA,KAAAA,OAAAA,EAJZ,KAAAC,YAAa,EAKhB,WACDpB,KAAKmB,QAAU,SAGdD,EAAuBG,SAAShG,SACjC2E,KAAKoB,WAAaF,EAAuBG,SAAS,GAAGD,YAGvDpB,KAAKsB,eACLJ,EAAuBG,SAASxC,KAAKmB,MAG/BsB,e,MACN,OAAyB,QAAlB,EAAAtB,KAAKuB,qBAAa,QAAKvB,KAAKuB,cAAgBC,OAAOC,KAAKzB,KAAKmB,QAG/DO,OAAOC,GACZ,OAAO3B,KAAK4B,kBAAkBC,GAAUA,EAAMH,OAAO,IAAMC,KAGtDG,YACL,OAAON,OAAOE,OAAO1B,KAAKmB,QAGrBY,IAAIJ,GACT,OAAO3B,KAAK4B,kBAAkBC,GAAUA,EAAM/H,MAAM,IAAM6H,KAGrDK,KAAKL,EAAmB/D,GAE7B,OAAOoC,KAAK4B,kBAAkBC,GAAUA,EAAMI,IAAI,IAAMN,EAAW/D,KAG9DsE,QAAQC,EAAkBzF,EAAmC,QAOlE,OAAOsD,KAAK+B,IAAII,GAAUhH,MAAMyC,IAC9B,IAAIA,EAEF,MAAM,EAAAwE,EAAA,GAAU,kBAOlB,OAJgBxE,EAASlB,QAQtB2F,SAASF,EAAkBrB,GAE3BA,aAAgBnB,OACnBmB,EAAO1B,EAAc0B,IAGvB,MAAMlD,EAAW,IAAI0E,SAASxB,EAAM,CAClCyB,QAAS,CACP,iBAAkB,GAAKzB,EAAKhB,QAIhC,OAAOE,KAAKgC,KAAKG,EAAUvE,GAAUzC,MAAK,IAAM2F,IAG3Cc,iBAAoBjD,GACzB,OAAIqB,KAAKoB,WAIF,IAAI9D,SAAW,CAAMC,EAASW,KAAW,O,EAAA,K,OAAA,E,EAAA,YAC9C,IAAIsE,GAAW,EACf,MAAMC,EAAUjF,YAAW,KACzBU,IAEAsE,GAAW,IACV,MAEH,IACE,MAAMX,QAAc7B,KAAKsB,eACzB,IAAIO,EAGF,MAFA7B,KAAKoB,YAAa,EAClBpB,KAAKuB,mBAAgBmB,EACf,YAGR,MAAMC,QAAYhE,EAASkD,GAE3B,GAAGW,EAAU,OACbjF,EAAQoF,GACR,MAAM7H,GACNoD,EAAOpD,GAGT8H,aAAaH,I,YAxBiC,K,iRAHvCnF,QAAQY,QAAO,EAAAkE,EAAA,GAAU,oBA+B7BS,eAAeV,EAAkBW,EAAkBxD,GACxD,MAAO,CACLzG,SAAUuF,IACV2E,UAAW,IACM,IAAInD,EAAaN,EAAUwD,GAAWhC,GAC5Cd,KAAKqC,SAASF,EAAUrB,GAAM/B,OAAM,IAAM+B,OAQlDkC,qBAAqBC,EAAkBC,GAC5C,OAAO5F,QAAQpC,IAAI8E,KAAKqB,SAAS8B,KAAKC,IAGpC,GAFAA,EAAQhC,WAAa6B,EAEjBC,EAIJ,OAAID,OAAJ,EACSG,EAAQtB,iBApIN,EAAAT,SAAqC,GCDtD,MAAMgC,EAA2F,IAAIC,IAC/FC,EAAe,IAAIrC,EAAuB,sBAE1CsC,EAA2B,cAgCjCC,aA7BuB,IACdF,EAAa3B,kBAAkBC,GAC7BA,EAAM6B,OAAOvI,MAAMwI,IACxB,MAAMC,EAAmC,IAAIN,IACvCO,EAAYC,KAAKC,MAAQ,IAAO,EACtC,IAAI,MAAMC,KAAWL,EAAU,CAC7B,MAAM7J,EAAQkK,EAAQC,IAAInK,MAAM,cAC7BA,IAAU8J,EAASM,IAAIpK,EAAM,KAC9B8J,EAASnD,IAAI3G,EAAM,GAAIkK,GAI3B,MAAMG,EAA2B,GACjC,IAAI,MAAOC,EAAIJ,KAAYJ,EAAU,CACnC,MAAM5F,EAAU6D,EAAM/H,MAAMkK,GAAS7I,MAAMyC,IACzC,IAAKA,EAAS2E,QAAQR,IAAIyB,GAnBlB,OAmB4DK,EAElE,OADApH,EAAI,4BAA6B2H,GAC1BvC,EAAMH,OAAOsC,EAAS,CAACK,cAAc,EAAMC,YAAY,OAIlEH,EAAStF,KAAKb,GAGhB,OAAOV,QAAQpC,IAAIiJ,SAKG,MAC5BV,aAAY,KACV,MAAMc,EAAqBC,IAC3B,IAAI,MAAOC,EAAaN,KAAad,EACnC,GAAGoB,IAAgBF,EAAoB,CACrC,IAAI,MAAMG,KAAUP,EACFA,EAASO,GACjBxG,SAGVmF,EAAiB3B,OAAO+C,MAG3B,MAIH,MAAME,EAAiC,IAAIrB,IAC3C,MAAMsB,EAMJ/E,YAAoBgF,GAAA,KAAAA,KAAAA,EAFZ,KAAAC,cAA6B,IAAIC,IAWjC,KAAAC,QAAU,KAChBL,EAAQjD,OAAO1B,KAAKoE,KATpBpE,KAAKoE,GAAKQ,EAAOK,MAAMJ,GACvBF,EAAQlE,IAAIT,KAAKoE,GAAIpE,MAGrBA,KAAKkF,UAAYL,EAAK/E,KAAO,SAAqBqF,EAA2BC,EAC7EpF,KAAKqF,iBCrEM,SACbC,EACAjI,EACAkI,GAAiB,EACjBC,GAAgB,GAEhB,IAAIC,EACAC,EAAiDnI,EAAgCW,EACjFyH,GAAa,EAEjB,MAAMC,EAAU/K,IACd,MAAMgL,EAAWtI,EAASuI,EAAU5H,EACpC,IAEE2H,EADeP,EAAGS,MAAM,KAAMlL,IAE9B,MAAMC,GACNC,QAAQC,MAAM,iBAAkBF,GAEhCgL,EAAQhL,KAINkL,EAAW,IAAInL,KACf6K,IAAgBA,EAAiB,IAAIpI,SAAQ,CAACuI,EAAUC,KAAavI,EAAUsI,EAAU3H,EAAS4H,MAEnGL,GACD7C,aAAa6C,GACbE,GAAa,EACbzH,IACAwH,EAAiB,IAAIpI,SAAQ,CAACuI,EAAUC,KAAavI,EAAUsI,EAAU3H,EAAS4H,MAC1EP,IACRK,EAAO/K,GACP8K,GAAa,GAGf,MAAMM,EAAkB,gBAAe,MAElCT,GAAmBD,IAAkBI,GACtCC,EAAO/K,GAIN4K,IAAmBQ,IACpBR,EAAiBC,EAAiBnI,EAAUW,OAASwE,EACrDiD,GAAa,KAEdtI,GAIH,OAFAoI,EAAiBQ,EACjBP,EAAe3G,MAAMZ,GACduH,GAcT,OAXAM,EAASpD,aAAe,KACnB6C,IACD,iBAAiBA,GACjBvH,IACAuH,EAAiBC,EAAiBnI,EAAUW,OAASwE,EACrDiD,GAAa,IAIjBK,EAASE,YAAc,MAAQT,EAExBO,EDKmBA,CAAShG,KAAKgF,QAAS,MAAQ,GAAO,GAOlDmB,0BAA0BC,EAAuBC,EAAeC,GAAc,G,qCAC1F,MAAMC,EAA6C,CACjDC,MAAOxG,KAAKoE,GACZqC,KAAMzG,KAAK6E,KAAK4B,KAChBpG,OAAQ+F,EACRC,MAAAA,GAGI3B,EAASgC,KAAKC,UAAUJ,GAExBhC,EAAqBC,IAC3B,IAAIL,EAAWd,EAAiBtB,IAAIwC,GAChCJ,GACFd,EAAiB5C,IAAI8D,EAAoBJ,EAAW,IAGtD,IAAItL,EAAWsL,EAASO,GACxB,GAAG7L,EACD,OAAOA,EAASsC,MAAMyL,GAAeA,EAAW3G,QAGlDD,KAAK8E,cAAc+B,IAAIT,GAEvBvN,EAAWsL,EAASO,GAAUtG,IAE9B0I,EAAmBlB,OAAO,kBAAmBW,OAAS7D,EAAW6B,GAChEpJ,KAAKtC,EAAS0E,QAAS1E,EAASqF,QAAQc,SAAQ,KAC5CmF,EAASO,KAAY7L,WACfsL,EAASO,GAEZxF,OAAOwE,KAAKS,GAAU9I,QACxBgI,EAAiB3B,OAAO6C,OAK9B,MAAMwC,EAAelO,EAASsC,MAAMyL,GAAeA,EAAW3G,QAO9D,OAJED,KAAKgH,iBAAiBD,EAAcX,EAAeC,IAClDC,GAAetG,KAAKiH,cAAcb,EAAeA,EAAkC,GAAjBpG,KAAKkF,WAGnE6B,G,+RAGDG,yBAAyBd,EAAuBC,EAAeC,GAKrE,MAAMa,EAAMnH,KAAKoH,YAAYhB,EAAeC,GAC5C,OAAO9C,EAAarB,QAAQiF,GAAKhM,MAAM2F,GAC9BwF,EAAc,IAAIpG,WErIhB,SAA8BY,GAC3C,OCDa,SAA+BA,GAC5C,OCGa,SAAoBA,EAAYpE,GAE7C,OAAO,IAAIY,SAAcC,IACvB,MAAM8J,EAAS,IAAIC,WACnBD,EAAOE,iBAAiB,WAAYC,IAElCjK,EAAQiK,EAAEC,OAAOC,WAEnBL,EAAa,kBAAEvG,MDXV6G,CAAW7G,GDAX8G,CAAsB9G,GAAM3F,MAAM0M,GAAW,IAAI3H,WAAW2H,KFoIvBC,CAAqBhH,KAC3D9F,IACCA,EAAMN,QAMLqN,gBAAgB3B,EAAuBC,EAAeC,GAC5D,OAAOtG,KAAKkH,yBAAyBd,EAAeC,EAAOC,GAAanL,MAAM8E,GACrEA,GAASD,KAAKmG,0BAA0BC,EAAeC,EAAOC,KAIjEU,iBAAiBnO,EAA+BuN,EAAuBC,GAC7E,OAAOxN,EAASsC,MAAM8E,IACpB,MAAMkH,EAAMnH,KAAKoH,YAAYhB,EAAeC,GACtCzI,EAAW,IAAI0E,SAASrC,EAAO,CACnCsC,QAAS,CACP,iBAAkB,GAAKtC,EAAM5E,OAC7B,eAAgB,2BAChB,CAACmI,GAA2B,IAAMM,KAAKC,MAAQ,IAAO,MAI1D,OAAOR,EAAavB,KAAKmF,EAAKvJ,MAI1BoK,aAAa3H,GAChBL,KAAK8E,cAAcZ,IAAI7D,KAI1BL,KAAK8E,cAAc+B,IAAIxG,GACvBL,KAAK+H,gBAAgB1H,EAAQL,KAAKkF,WAAW,IAGvC+B,cAAc5G,EAAgB4H,GAKpC,GAJGA,EAAMjI,KAAK6E,KAAK/E,OACjBmI,EAAMjI,KAAK6E,KAAK/E,MAGdO,EAGF,KAAMA,EAAS4H,EAAK5H,GAAUL,KAAKkF,UACjClF,KAAKgI,aAAa3H,QAHpBL,KAAKgI,aAAaE,EAAY7H,EAAQL,KAAKkF,YAQxCiD,aAAaC,GAClBpI,KAAKqF,mBAEL,MAAMgD,EA2EV,SAAqCD,EAAoB9I,EAAkBQ,GACzE,OAAgB,IAAbsI,EAAM,IAAyB,IAAbA,EAAM,GAClB,IAAI9F,SAAS,IAAIpC,WAAW,GAAG2H,OAAQ,CAC5C/J,OAAQ,IACRwK,WAAY,kBACZ/F,QAAS,CACP,gBAAiB,QACjB,gBAAiB,aAAazC,GAAQ,MACtC,iBAAkB,IAClB,eAAgBR,GAAY,eAK3B,KAzFoBiJ,CAA4BH,EAAOpI,KAAK6E,KAAKvF,SAAUU,KAAK6E,KAAK/E,MAC1F,GAAGuI,EACD,OAAOA,EAGT,IAAKhI,EAAQ4H,GAAOG,EAQpB,MAAM/B,EAAQ4B,GAAOA,EAAMjI,KAAKkF,UAoGpC,SAAoBmB,GAClB,OAAO,WAAKmC,KAAKC,KAAKD,KAAK/L,IAAI4J,GAASmC,KAAK/L,IAAI,KArGHiM,CAAWT,EAAM5H,EAAS,GAAKL,KAAKkF,UAC1EkB,EAAgB8B,EAAY7H,EAAQgG,GAM1C,OAJI4B,IACFA,EAAMO,KAAKG,IAAItI,EAASgG,EAAOrG,KAAK6E,KAAK/E,KAAO,IAG3CE,KAAK+H,gBAAgB3B,EAAeC,GAAOlL,MAAMyN,IAInDvI,IAAW+F,GAAiB6B,IAAS7B,EAAgBC,IACtDuC,EAAKA,EAAGtN,MAAM+E,EAAS+F,EAAe6B,EAAM7B,EAAgB,IAG9D,MAAM7D,EAAkC,CACtC,gBAAiB,QACjB,gBAAiB,SAASlC,KAAUA,EAASuI,EAAGrI,WAAa,KAAKP,KAAK6E,KAAK/E,MAAQ,MACpF,iBAAkB,GAAG8I,EAAGrI,cAS1B,OANGP,KAAK6E,KAAKvF,WACXiD,EAAQ,gBAAkBvC,KAAK6E,KAAKvF,UAK/B,IAAIgD,SAASsG,EAAI,CACtB9K,OAAQ,IACRwK,WAAY,kBACZ/F,QAAAA,OAME6E,YAAYhB,EAAuBC,GACzC,OAAOrG,KAAKoE,GAAK,WAAagC,EAAgB,UAAYC,EAGrDrD,WAAW6B,G,MAChB,OAAoC,QAA7B,EAAAF,EAAQ5C,IAAI/B,KAAKiF,MAAMJ,WAAM,QAAI,IAAID,EAAOC,GAG7C7B,aAAa6B,GACnB,OAAQA,EAAKgE,SAAyDzE,IAsC1E,MAAMgB,EAA4B,OAC5BD,EAA2B,QAYjC,SAAS+C,EAAY7H,EAAgByI,EAXR,MAY3B,OAAOzI,EAAUA,EAASyI,E,cKlTb,SAASC,EAAUC,EAAQC,GACxC,MAAMpL,EAAKqB,OAAOwE,KAAMwF,SAAYF,EACpC,OAAOA,GAAKC,GAAY,WAAPC,GAAmBA,WADeD,EAEjDpL,EAAGmL,GAAG3N,SAAWwC,EAAGoL,GAAG5N,QACrBwC,EAAGmL,GAAGG,OAAOhC,GAAQ4B,EAAUC,EAAE7B,GAAM8B,EAAE9B,MACxC6B,IAAMC,ECmCN,MAAMG,EAUXvJ,YAAYwJ,IClDC,SAAuBC,EAAWC,GAC/C,GAAGA,EACD,IAAI,MAAMC,KAAKD,OACQ7G,IAAlB6G,EAAWC,KAEZF,EAAOE,GAAKD,EAAWC,ID8C3BC,CAAWzJ,KAAMqJ,GAEd,WACDrJ,KAAK0J,MAAQ,SAGf1J,KAAK2J,oBAAqB,EAC1B3J,KAAKvD,KAAM,EAAAN,EAAA,IAAO,CAAC,MAAOkN,EAAGK,MAAME,KAAK,MACxC5J,KAAKvD,IAAI,eAETuD,KAAKsB,cAAa,GAElB8H,EAAIS,UAAUhL,KAAKmB,MAGd8J,cACL,OAAO9J,KAAK2J,mBAGPrI,aAAayI,GAAY,GAC9B,GAAG/J,KAAKuB,gBAAkBwI,EACxB,OAAO/J,KAAKuB,cAGd,MAAMyI,EAAgB,CAACC,EAAoBC,K,MACzC,MAAMC,EAAa5K,MAAM6K,KAAKH,EAAGE,YACjC,IAAI,MAAME,KAAaF,EACrBF,EAAGK,YAAYD,GAGjB,GAAiB,QAAb,EAAAH,EAAMK,eAAO,eAAElP,OAInB,IAAI,MAAMmP,KAASN,EAAMK,QACpBN,EAAGE,WAAWM,SAASD,EAAMH,YAIhCJ,EAAGS,YAAYF,EAAMH,UAAWG,EAAMG,QAASH,EAAMI,mBASzD,IACE,IAAI5G,EAAU6G,UAAUpJ,KAAKzB,KAAK0J,KAAM1J,KAAK8K,SAE7C,IAAI9G,EACF,OAAO1G,QAAQY,SAEjB,MAAMlD,GAGN,OAFAgF,KAAKvD,IAAIzB,MAAM,mBAAqBA,EAAgB+P,SACpD/K,KAAK2J,oBAAqB,EACnBrM,QAAQY,OAAOlD,GAGxB,IAAIgQ,GAAW,EAOf,OANAxN,YAAW,KACLwN,GACFhH,EAAQiH,SAAQ,EAAA7I,EAAA,GAAU,yBAE3B,KAEIpC,KAAKuB,cAAgB,IAAIjE,SAAqB,CAACC,EAASW,KAC7D8F,EAAQkH,UAAaC,IACnBH,GAAW,EACX,MAAM3B,EAAKrF,EAAQ0D,OACnB,IAAI0D,GAAY,EAEhBpL,KAAKvD,IAAI,UAET4M,EAAG4B,QAAWjQ,IACZgF,KAAK2J,oBAAqB,EAC1B3J,KAAKvD,IAAIzB,MAAM,8CAA+CA,GAC9DkD,EAAOlD,IAGTqO,EAAGgC,QAAW7D,IACZxH,KAAKvD,IAAIzB,MAAM,UAAWwM,IACzB4D,GAAapL,KAAKsB,gBAGrB+H,EAAGiC,QAAW9D,IACZxH,KAAKvD,IAAIzB,MAAM,SAAUwM,GACzB,MAAM+D,EAAc/D,EAAEC,OAEtBzH,KAAKsB,aAAa8J,GAAY,GAE3BG,EAAYN,SACbM,EAAYN,QAAQzD,GAGtB6B,EAAGmC,SAGLnC,EAAGoC,gBAAmBjE,IACpBxH,KAAKvD,IAAIzB,MAAM,0BAGjBuC,EAAQyC,KAAKqJ,GAAKA,IAGpBrF,EAAQiH,QAAWE,IACjBH,GAAW,EACXhL,KAAK2J,oBAAqB,EAC1B3J,KAAKvD,IAAIzB,MAAM,8CAA+CmQ,GAC9DjN,EAAOiN,IAGTnH,EAAQ0H,gBAAmBP,IACzBH,GAAW,EACXhL,KAAKvD,IAAIkP,KAAK,8BAA+BR,EAAMS,WAAY,KAAMT,EAAMU,YAE3E,MAAMpE,EAAS0D,EAAM1D,OACf4B,EAAK5B,EAAOC,OAClB1H,KAAK8L,OAAOvQ,SAAS2O,IAOnB,GAAIb,EAAG0C,iBAAiBtB,SAASP,EAAMR,MAEhC,CACL,MACMO,EADMxC,EAAO8D,YACJS,YAAY9B,EAAMR,MACjCM,EAAcC,EAAIC,OAxFA,EAACb,EAAiBa,KAC1C,MAAMD,EAAKZ,EAAG4C,kBAAkB/B,EAAMR,MACtCM,EAAcC,EAAIC,IAkFZ+B,CAAkB5C,EAAIa,UAWzBlH,cAAuCqG,G,MAC5C,OAAmE,QAA5D,EAAArJ,KAAK6J,UAAUqC,MAAMC,GAAaA,EAASzC,OAASL,EAAGK,cAAK,QAAI,IAAIN,EAAIC,GAG1ErG,sBAAsBoJ,GAC3BpM,KAAK6J,UAAUtO,SAAS6H,IACtB,GAAGgJ,GAAYA,IAAahJ,EAC1B,OAGF,MAAMiG,EAAKjG,EAAQiG,GAChBA,IACDA,EAAGgC,QAAU,OACbhC,EAAGmC,aAjKM,EAAA3B,UAAmB,GAuKrB,MAAMwC,EAKnBxM,YAAYwJ,EAAOiD,GACjBtM,KAAKsM,UAAYA,EACjBtM,KAAKvD,KAAM,EAAAN,EAAA,IAAO,CAAC,MAAOkN,EAAGK,KAAM4C,GAAW1C,KAAK,MACnD5J,KAAKuM,IAAMnD,EAAIoD,OAAOnD,GAqCjB3H,OAAOC,EAA8B2K,GAM1C,OAJI/M,MAAMC,QAAQmC,KAChBA,EAAY,GAAG8K,OAAO9K,IAGjB3B,KAAK0M,eAAe,aAAcV,GAC/BrK,EAAuBwB,KAAKxB,GAAcqK,EAAYtK,OAAOC,MACxB,GAAI2K,GAG9CK,MAAML,GACX,OAAOtM,KAAK0M,eAAe,aAAcV,GAAgBA,EAAYW,SAA2B,GAAIL,GAG/FtK,KAAKL,EAA8B7C,EAAoBwN,GAiB5D,OALI/M,MAAMC,QAAQmC,KAChBA,EAAY,GAAG8K,OAAO9K,GACtB7C,EAAQ,GAAG2N,OAAO3N,IAGbkB,KAAK0M,eAAe,aAAcV,GAC/BrK,EAAuBwB,KAAI,CAACxB,EAAWiL,IAAQZ,EAAY/J,IAAInD,EAAM8N,GAAMjL,MACxC,GAAI2K,GA8E5CvK,IAAOJ,EAA8B2K,GAO1C,OAJI/M,MAAMC,QAAQmC,KAChBA,EAAY,GAAG8K,OAAO9K,IAGpBA,EAAUtG,OAIP2E,KAAK0M,eAAkB,YAAaV,GACjCrK,EAAuBwB,KAAKxB,GAAcqK,EAAYjK,IAAIJ,MACxB,GAAI2K,GALvChP,QAAQC,QAAQ,IAQnBmP,eACNG,EACAlO,EACAlC,EACA6P,EAAYtM,KAAKsM,WAEjB,IAAIQ,EAOJ,OALGrQ,IACDqQ,EAAOC,YAAYhJ,MACnB/D,KAAKvD,IAAIA,EAAM,YAGVuD,KAAKuM,IAAIjL,eAAenG,MAAMkO,GAC5B,IAAI/L,SAAW,CAACC,EAASW,KAK9B,MAAMqN,EAAclC,EAAGkC,YAAY,CAACe,GAAYO,GAE1CG,EAAU,KACdpK,aAAaH,GACbvE,EAAOqN,EAAYvQ,QAIfiS,EAAa,KACjBrK,aAAaH,GAEVhG,GACDuD,KAAKvD,IAAIA,EAAM,QAASsQ,YAAYhJ,MAAQ+I,GAQ9C,MAAMI,EAAUvJ,EAASR,KAAKgK,GAAMA,EAAEzF,SACtCnK,EAAQiC,EAAU0N,EAAUA,EAAQ,KAGtC3B,EAAYN,QAAU+B,EAGtB,MAAMI,EAAsC,cAATP,EAChCO,IACD7B,EAAY8B,WAAa,IAAMJ,KAGjC,MAAMxK,EAAUjF,YAAW,KACzBwC,KAAKvD,IAAIzB,MAAM,2BAA4BuQ,EAAa9O,KACvD,KAOG6Q,EAAiB3O,EAAS4M,EAAYS,YAAYM,IAElD9M,EAAUD,MAAMC,QAAQ8N,GACxB3J,EAAyBnE,EAAU8N,EAAiB,GAAGb,OAAOa,GAEpE,GAAGF,EACD,OAGF,MAAM/R,EAASsI,EAAStI,OACxB,IAAIkS,EAAOlS,EAEX,MAAMmS,EAAoB,KACrBjC,EAAYvQ,SAITuS,GACJN,KAIJ,IAAI,IAAIzD,EAAI,EAAGA,EAAInO,IAAUmO,EAAG,CAC9B,MAAMxF,EAAUL,EAAS6F,GACzBxF,EAAQiH,QAAU+B,EAClBhJ,EAAQkH,UAAYsC,QAMrBC,OAAUnB,GACf,OAAOtM,KAAK0M,eAAoB,YAAaV,GAAgBA,EAAYyB,UAA6B,GAAInB,I,0SEtc9G,MAAM,EAAMpS,KACNwT,EAAiB7E,SAAS8E,SAAW,KAAO9E,SAAS+E,SAAW/E,SAASgF,SAASC,MAAM,KAAKxS,MAAM,GAAI,GAAGsO,KAAK,KAAO,IAmFtHmE,EAAS,IA5Df,MAIElO,YACEwJ,EACAiD,EACQ0B,GAAA,KAAAA,SAAAA,EANF,KAAAnM,MAA0B,GAUhC7B,KAAKoD,QAAU,IAAIiJ,EAAchD,EAAIiD,GAG1BvK,IAA6BoF,G,yCACxC,QAAuBzE,IAApB1C,KAAK6B,MAAMsF,GACZ,OAAOnH,KAAK6B,MAAMsF,GAGpB,IAAIrI,EACJ,IACEA,QAAckB,KAAKoD,QAAQrB,IAAIoF,GAC/B,MAAMrM,IAIR,QAAuB4H,IAApB1C,KAAK6B,MAAMsF,GACZ,OAAOnH,KAAK6B,MAAMsF,GAGpB,QAAazE,IAAV5D,EAAqB,CACtB,MAAMH,EAAWqB,KAAKgO,SAAS7G,GAC/BrI,EAA6B,mBAAf,EAA4BH,IAAaA,EAGzD,OAAOqB,KAAK6B,MAAMsF,GAAOrI,KAGd2B,IAA6B0G,EAAQrI,G,+CAEhD,IAAGiK,EAD2B,QAAf,EAAA/I,KAAK6B,MAAMsF,UAAI,QAAInH,KAAKgO,SAAS7G,GAC3BrI,GAArB,CAIAkB,KAAK6B,MAAMsF,GAAOrI,EAElB,IACEkB,KAAKoD,QAAQpB,KAAKmF,EAAerI,GACjC,MAAMhE,WClF6F,CACvG4O,KAAM,OACNoB,QAAS,EACTgB,OAAQ,CAAC,CACPpC,KAAM,WACL,CACDA,KAAM,eACL,CACDA,KAAM,SACL,CACDA,KAAM,SACL,CACDA,KAAM,WAaL,CACDA,KAAM,cDoE6E,UAAW,CAChGuE,gBAAiB,EACjBC,UAAW,CACTC,uBAAwB,yBACxBC,mBAAoB,eACpBC,qBAAsB,YAExBC,cAAe,KAGjB,EAAI/G,iBAAiB,QAAS4D,IAC5B,MAAMoD,EAA8BpD,EAAMqD,KAAKC,OAC/ChS,EAAI,OAAQ8R,GAEZ,IAAIG,GAAmB,EACvB,MAAMC,EAAgBrR,QAAQpC,IAAI,CAChC6S,EAAOhM,IAAI,mBACX,EAAIxH,QAAQC,SAAS,CAACE,KAAM,aAC3BS,MAAMuM,IACP,MAAOkH,EAAWC,GAAcnH,EAIhC,GAFAjL,EAAI,kBAAmBoS,GACvBH,EAAmBG,EAAWxT,OAAS,EACpCqT,EACD,KAAM,sDAGR,MAAMI,EAAUhL,KAAKC,MACrB,GAAGgL,KACCH,GACAE,EAAUF,EACZ,KAAM,yCAAyCpG,KAAKC,MAAMmG,EAAYE,GAAW,WAGnF,IAAIP,EAAIS,MACN,KAAM,eAIVL,EAAc5P,OAAOkQ,IACnBxS,EAAIwS,MAGN,MAAMC,EAAsBP,EAAcxT,MAAK,IACtCmC,QAAQpC,IAAI,CAAC6S,EAAOhM,IAAI,iBAAkBgM,EAAOhM,IAAI,iBAC3D5G,MAAMuM,GAyHX,SAA0B6G,EAA6BY,EAAwCC,GAC7F,MAAMC,EAAO,qCACb,IAEIC,EAFAC,EAAQhB,EAAIgB,OAAS,WACrBC,EAAOjB,EAAIkB,aAAe,GAG3BlB,EAAImB,SAEHJ,EADCf,EAAImB,OAAOC,WACH,IAAMpB,EAAImB,OAAOC,WAClBpB,EAAImB,OAAOE,QACV,IAAMrB,EAAImB,OAAOE,QAEjBrB,EAAImB,OAAOG,SAAW,IAInCtB,EAAImB,OAAOJ,OAAS,GAAKA,EACzB,IAAIQ,EAAM,OAASR,EAEhBH,GAAYA,EAASY,YACtBR,EAAQ,WACRC,EAAOJ,EAAKjB,uBACZ2B,EAAM,gBAGRrT,EAAI,cAAe8S,EAAOC,EAAMH,EAAMd,GAEtC,MAAMyB,EAA+F,CAAC,CACpGC,OAAQ,SACRV,MAAOH,EAAKhB,qBAcd,OAR4B,EAAI8B,aAAaC,iBAAiBZ,EAAO,CACnEC,KAAAA,EACAH,KAAAA,EACAS,IAAAA,EACAtB,KAAMD,EACNyB,QAAAA,IAGyB7U,MAAMgQ,IA1FnC,IAA6BiF,GA4FtBjF,MAAAA,OAAK,EAALA,EAAOiF,gBA5FeA,EA8FHjF,EAAMiF,aA7F1BC,EAAcnM,IAAIkM,KACpBC,EAAcxJ,IAAIuJ,GAElBA,EAAa/E,QAAUiF,OA4FtBvR,OAAO/D,IACRyB,EAAIzB,MAAM,4BAA6BA,MA1KhCuV,CAAiBhC,EAAK7G,EAAO,GAAIA,EAAO,MAG3C8I,EAAetB,EAAoBnQ,OAAM,KAC7CtC,EAAI,oCAAqCiS,GACtCK,KAA8BL,EACxB+B,IAGF,EAAIP,aAAaC,iBAAiB,WAAY,CACnDL,IAAK,iBACJ3U,MAAK,KACN,GAAGuT,EACD,OAAO+B,IAGTjT,YAAW,IAAMiT,KAAyB/B,EAAmB,EAAI,QAChE3P,OAAO/D,IACRyB,EAAIzB,MAAM,0BAA2BA,SAIzCmQ,EAAMuF,UAAUF,MAGlB,EAAIjJ,iBAAiB,qBAAsB4D,IACzC,MAAMiF,EAAejF,EAAMiF,aAC3B3T,EAAI,0BAA2B2T,EAAaN,KAC5CM,EAAa5E,QAEb,MAAMyE,EAAS9E,EAAM8E,OACrB,GAAc,WAAXA,GAAuBlB,IAGxB,OAFAtS,EAAI,yBACJsR,EAAOtN,IAAI,kBAAmBqD,KAAKC,MAAQ,OAI7C,MAAMyK,EAA+B4B,EAAa5B,KAClD,IAAIA,EACF,OAGF,MAAMxQ,EAAU,EAAIzD,QAAQC,SAAS,CACnCE,KAAM,WACLS,MAAM0T,IACPL,EAAKyB,OAASA,EACdU,EAAsBnC,EACtB,IAAI,IAAIhF,EAAI,EAAGA,EAAIqF,EAAWxT,OAAQmO,IAAK,CACzC,MAAMoH,EAAS/B,EAAWrF,GAC1B,GAAG,UAAWoH,EAIZ,OAHAA,EAAOC,QACP/J,EAAmBgK,WAAW,YAAaH,EAAqBC,QAChED,OAAsBjO,GAK1B,GAAG,EAAInI,QAAQwW,WACb,OAAOhD,EAAOhM,IAAI,iBAAiB5G,MAAMgU,GAChC,EAAI5U,QAAQwW,WAAW5B,EAAS6B,SAAWtD,QAGrD3O,OAAO/D,IACRyB,EAAIzB,MAAM,yBAA0BA,MAGtCmQ,EAAMuF,UAAU1S,MAGlB,EAAIuJ,iBAAiB,oBAAqB+I,GAE1C,MAAMD,EAAmC,IAAItL,IAC7C,IAAI4L,EASJ,SAASL,EAAoBnF,GAI7B,IAAiCiF,EAAAA,EAHPjF,EAAMiF,aAI9BC,EAAc3O,OAAO0O,GAGhB,SAASK,IACd,IAAI,MAAML,KAAgBC,EACxB,IACED,EAAa5E,QACb,MAAMhE,IAGV,IAAIxJ,EAiBJ,OAfEA,EADC,qBAAsB,EAAIkS,aACjB,EAAIA,aAAae,iBAAiB,IAAI9V,MAAMkV,IACpD,IAAI,IAAI7G,EAAI,EAAG0H,EAAMb,EAAchV,OAAQmO,EAAI0H,IAAO1H,EACpD,IACE6G,EAAc7G,GAAGgC,QACjB,MAAMhE,QAETzI,OAAO/D,IACRyB,EAAIzB,MAAM,4BAA6BA,MAG/BsC,QAAQC,UAGpB8S,EAAc1D,QAEP3O,EAGT,SAAS+Q,IACP,OAAO,EAAAhV,W,sBEpOM,MAAMoX,UAA2D,IAoB9EtR,cACEuR,MAAM,WAEN,OAAmB,wBAAoCpR,O,cCrC3D,MAAMqR,EAAyC,IAAI/N,IAC7CgO,GAAiB,EAAAlP,EAAA,GAAU,WAGhClI,KAAamX,YAAcA,EAI5B,MAAME,EAAY,CAChBC,SAAWjL,IACT,MAAM,GAACnC,GAAMmC,EACb,GAAG8K,EAAYnN,IAAIE,GACjB,OAAO9G,QAAQY,OAAOoT,GAMxB,MAAMG,EAAW,IAAIC,qBAAqB,CAACC,cAAe,IAQpD3T,EAAUI,IAWhB,IAAIwT,EAVJ5T,EAAQ7C,MAAK,KACXqC,YAAW,KACT6T,EAAY3P,OAAO0C,KAClB,QACF,KACDiN,EAAY3P,OAAO0C,MAMrB,MAAMyN,EAAW,IAAIC,eAAe,CAClCC,MAAQC,IACNJ,EAAaI,GAGf/S,OAASgQ,IACPjR,EAAQE,OAAOoT,KAEhBG,GAQGQ,EAAI,+BACL1L,GAAO,CAEV2L,eAAgBL,EAIhB7T,QAAAA,EACA4T,WAAAA,IAMF,OAHAP,EAAY5Q,IAAI2D,EAAI6N,GAGbjU,EAAQe,OAAM,KAAO,MAAMuS,MAGpCa,cAAe,EAAE/N,GAAAA,EAAIgO,MAAAA,MACnB,MAAMH,EAAOZ,EAAYtP,IAAIqC,GAC7B,OAAI6N,EAMGA,EAAKL,WAAWS,QAAQD,GALtB9U,QAAQY,UAQnBoU,iBAAmBlO,IACjB,MAAM6N,EAAOZ,EAAYtP,IAAIqC,GAC7B,OAAI6N,GAIJA,EAAKjU,QAAQT,UAGN0U,EAAKL,WAAWpG,SANdlO,QAAQY,UASnBqU,eAAiBnO,IACf,MAAM6N,EAAOZ,EAAYtP,IAAIqC,GAC7B,GAAI6N,EAOJ,OAHAA,EAAKjU,QAAQE,SAGN+T,EAAKL,WAAW5W,UAa3B,SAASwX,EAAgBrH,EAAmBsH,GAC1C,MAAMzU,EAAUZ,EAAM,KAAKjC,MAAK,KAC9B,MAAM8W,EAAOZ,EAAYtP,IAAI0Q,GAC7B,IAAIR,GAASA,EAAKS,KAChB,OAGFT,EAAKS,MAAO,EACZ,MAAMC,EAASV,EAAKC,eAEpB,OADiB,IAAI5P,SAASqQ,EAAQ,CAACpQ,QAAS0P,EAAK1P,aAIvD4I,EAAMyH,YAAY5U,GAGpB,SAAS6U,IACP,GAAGxB,EAAYvR,KACb,IAAI,MAAOsE,EAAI6N,KAASZ,EAEtBY,EAAKL,WAAW5W,QC1If,MAAMyB,GAAM,EAAAN,EAAA,IAAO,KAAM,WAAiB,WAAiB,KAAAL,IAAe,WAAe,GAC1F,EAAM5B,KAGZ,IAAI4Y,EACG,MAAMtO,EAAwB,IAAMsO,EAerCC,EAAqBC,IACzBvW,EAAI,mBAAoBuW,EAAO5O,GAAI,iBAAkB6O,GAAiBnT,MAE9C,SAArBkT,EAAOE,WAKVzW,EAAI,UAAW8C,MAAM6K,KAAK6I,KAC1BnM,EAAmBgK,WAAW,aAASpO,EAAWsQ,GAhBpB,CAACA,IAC3BC,GAAiBnT,MAASgT,IAC5BrW,EAAI,oCARgB,CAACuW,IACvB,MAAMG,EAAU,IAAIC,eACpBtM,EAAmBuM,WAAWP,EAAsBK,EAAQG,OAC5DxM,EAAmBgK,WAAW,YAAQpO,EAAWsQ,EAAQ,CAACG,EAAQI,SAMhEC,CAAgBR,KAclBS,CAAwBT,GACxBC,GAAiBxS,IAAIuS,EAAO5O,GAAI4O,IAP9BvW,EAAIkP,KAAK,wCAAyCqH,EAAO5O,KAUhD0C,EAAqB,IAAIqK,EACtCrK,EAAmB4M,2BAA2B,CAC5CC,mBAAoBlD,EAEpBmD,eAAgB,EAAE3Q,QAAAA,EAASC,WAAAA,MACzBhC,EAAuB2S,cAAc5Q,EAASC,IAGhD4Q,SAAU,CAACvN,EAASyM,MJmQf,SAAgBzM,EAAqCyM,GACvDrC,GAAuBqC,IACxBlM,EAAmBgK,WAAW,YAAaH,EAAqBqC,GAChErC,OAAsBjO,GAGrB6D,EAAQ6I,MACTrB,EAAOtN,IAAI,YAAa8F,EAAQ6I,MAG/B7I,EAAQ4I,UACTpB,EAAOtN,IAAI,gBAAiB8F,EAAQ4I,UI7QpC4E,CAAOxN,EAASyM,IAGlBgB,MAAO,CAACzN,EAASyM,KACfD,EAAkBC,MAItB,MACER,gBAAe,EACfyB,gBAAiBC,IDwDJ,SAAwBpN,GAGrC,OAFAA,EAAmB4M,2BAA2BnC,GAEvC,CACLiB,gBAAAA,EACAyB,gBAAiBpB,GC5DjBsB,CAAerN,IAGnB,UAAmB3L,MAAMiZ,IACvB3X,EAAI,OAAO2X,EAAc/Y,iCACzB+Y,EAAc7Y,SAAS8Y,IACrBtB,EAAkBsB,SAItB,MAAMpB,GAA8C,IAAI3P,IACvDpJ,KAAa+Y,iBAAmBA,GC9ElB,SACbxO,EACA6P,EACAC,GAEA,MAAMlB,EAAa,CAACmB,EAAiBC,KACnChQ,EAAYiQ,iBAAiBF,GAC7BC,GAAYhQ,EAAYkQ,eAAeF,IAIzChQ,EAAYmQ,qBDoEoC5B,IAChDvW,EAAI,6BAA8BuW,GACXA,aAAkB6B,cAClB5B,GAAiB/O,IAAI8O,EAAO5O,KAKnD6O,GAAiBvR,OAAOsR,EAAO5O,IAC/B3H,EAAI,4BAA6BwW,GAAiBnT,MAC9CmT,GAAiBnT,OACnBrD,EAAIkP,KAAK,mBAENmH,IACDhM,EAAmBgO,WAAWhC,GAC9BA,OAAsBpQ,GAGxBwR,OAdAzX,EAAIkP,KAAK,yBCtE4B,oBAA9B,wBACN,qBAAwD,WAAYnE,GAAM6L,EAAW7L,EAAEwL,OAAQxL,EAAEwL,UACrD,oBAA/B,yBACdK,EAAW,IAAK,MAEhBA,EAAW,IAAK,KD6DpB0B,CAAkBjO,GAuBlB,MAAMkO,GAAW7J,IAEf,IACG,EAAA7R,WACoD,IAArD6R,EAAMnH,QAAQC,IAAIxK,QAAQoP,SAASoM,OAAS,MAC5C9J,EAAMnH,QAAQC,IAAInK,MAAM,oFAExB,OAAOqR,EAAMyH,YnBhGV,SAA4BzH,G,qCACjC,IAEE,MAAMtJ,QAAc9D,EAAYN,EAAI+D,OAAOC,KAAK/D,IAC1CwX,QAAanX,EAAY8D,EAAM/H,MAAMqR,EAAMnH,QAAS,CAACM,YAAY,KAEvE,GAAG4Q,GAAQvX,EAAkBuX,GAC3B,OAAOA,EAGT,MAAM3S,EAAuB,CAAC,KAAQ,KACtC,IAAI3E,QAAiBuX,MAAMhK,EAAMnH,QAAS,CAACzB,QAAAA,IAC3C,GAAG5E,EAAkBC,GACnBiE,EAAMI,IAAIkJ,EAAMnH,QAASpG,EAASwX,cAC7B,GAAuB,MAApBxX,EAASE,OAAgB,CACjC,MAAMmG,EAAMkH,EAAMnH,QAAQC,IAAIoR,QAAQ,QAAS,IAAM,KAAuB,IAAhB7M,KAAK8M,SAAoB,GACrF1X,QAAiBuX,MAAMlR,EAAK,CAAC1B,QAAAA,IAC1B5E,EAAkBC,IACnBiE,EAAMI,IAAIkJ,EAAMnH,QAASpG,EAASwX,SAItC,OAAOxX,EACP,MAAM9C,GACN,OAAOqa,MAAMhK,EAAMnH,W,+RmBwEMuR,CAAapK,IAIxC,IAEE,MAAOqK,EAAO/C,GAAUtH,EAAMnH,QAAQC,IAAI6J,MAAM,KAAKxS,OAAO,GAI5D,OAAOka,GACL,IAAK,UZiII,SAAuBrK,EAAmBsH,GACvD,MAAMrK,EAqCR,SAAoBqN,GAClB,IAAIA,EAAQ,MAAO,CAAC,EAAG,GACvB,MAAO,CAAEC,GAAUD,EAAO3H,MAAM,KAC1B6H,EAASD,EAAO5H,MAAM,OACrBzN,EAAQ4H,GAAO0N,EAAO,GAAG7H,MAAM,KAEtC,MAAO,EAAEzN,GAAS4H,GAAO,GA3CX2N,CAAWzK,EAAMnH,QAAQzB,QAAQR,IAAI,UAC7C8C,EAAwB6B,KAAKmP,MAAMC,mBAAmBrD,IACtDE,EAAS/N,EAAO7C,IAAI8C,GAI1BsG,EAAMyH,YAAYtV,QAAQW,KAAK,EACrB,KczQH,IAAIX,SAAUC,IACnBC,YAAW,KACTD,EAAQ,IAAI+E,SAAS,GAAI,CACvBxE,OAAQ,IACRwK,WAAY,0BdqQR,UACRqK,EAAOxK,aAAaC,MYzIhB2N,CAAc5K,EAAOsH,GACrB,MAGF,IAAK,WACH,EAAgBtH,EAAOsH,GACvB,MAGF,IAAK,OACHtH,EAAMyH,YAAY,IAAItQ,SAAS,UAInC,MAAMxH,GACN2B,EAAIzB,MAAM,cAAeF,GACzBqQ,EAAMyH,YAAY,IAAItQ,SAAS,GAAI,CACjCxE,OAAQ,IACRwK,WAAY,wBACZ/F,QAAS,CAAC,gBAAiB,iBAK3ByT,GAAgB,KACpB,EAAIC,QAAUjB,IAGhB,EAAIzN,iBAAiB,WAAY4D,IAC/B1O,EAAI,cACJ0O,EAAMuF,UAAU,EAAIwF,cAAc/a,MAAK,IAAMsB,EAAI,yBAGnD,EAAI8K,iBAAiB,YAAa4D,IAChC1O,EAAI,aAAc,GAClB0O,EAAMuF,UAAU,EAAIlP,OAAOE,OAAOhE,GAAmBvC,MAAK,IAAMsB,EAAI,2BACpE0O,EAAMuF,UAAU,EAAInW,QAAQ4b,QAAQhb,MAAK,IAAMsB,EAAI,yBAWrD,EAAI2Z,UAAY,EAAIC,SAAWL,GAE/BA,OGlLIM,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqB9T,IAAjB+T,EACH,OAAOA,EAAaC,QAGrB,IAAIC,EAASL,EAAyBE,GAAY,CAGjDE,QAAS,IAOV,OAHAE,EAAoBJ,GAAUG,EAAQA,EAAOD,QAASH,GAG/CI,EAAOD,QAIfH,EAAoBM,EAAID,EAGxBL,EAAoBvN,EAAI,KAGvB,IAAI8N,EAAsBP,EAAoBQ,OAAErU,EAAW,CAAC,MAAM,IAAO6T,EAAoB,QAE7F,OADsBA,EAAoBQ,EAAED,I7BhCzCje,EAAW,GACf0d,EAAoBQ,EAAI,CAACrP,EAAQsP,EAAU1R,EAAI2R,KAC9C,IAAGD,EAAH,CAMA,IAAIE,EAAeC,EAAAA,EACnB,IAAS3N,EAAI,EAAGA,EAAI3Q,EAASwC,OAAQmO,IAAK,CAGzC,IAFA,IAAKwN,EAAU1R,EAAI2R,GAAYpe,EAAS2Q,GACpC4N,GAAY,EACPC,EAAI,EAAGA,EAAIL,EAAS3b,OAAQgc,MACpB,EAAXJ,GAAsBC,GAAgBD,IAAa/X,OAAOwE,KAAK6S,EAAoBQ,GAAG5N,OAAOhC,GAASoP,EAAoBQ,EAAE5P,GAAK6P,EAASK,MAC9IL,EAASM,OAAOD,IAAK,IAErBD,GAAY,EACTH,EAAWC,IAAcA,EAAeD,IAG7C,GAAGG,EAAW,CACbve,EAASye,OAAO9N,IAAK,GACrB,IAAI2D,EAAI7H,SACE5C,IAANyK,IAAiBzF,EAASyF,IAGhC,OAAOzF,EAvBNuP,EAAWA,GAAY,EACvB,IAAI,IAAIzN,EAAI3Q,EAASwC,OAAQmO,EAAI,GAAK3Q,EAAS2Q,EAAI,GAAG,GAAKyN,EAAUzN,IAAK3Q,EAAS2Q,GAAK3Q,EAAS2Q,EAAI,GACrG3Q,EAAS2Q,GAAK,CAACwN,EAAU1R,EAAI2R,I8BJ/BV,EAAoBgB,EAAI,CAACb,EAASc,KACjC,IAAI,IAAIrQ,KAAOqQ,EACXjB,EAAoBkB,EAAED,EAAYrQ,KAASoP,EAAoBkB,EAAEf,EAASvP,IAC5EjI,OAAOwY,eAAehB,EAASvP,EAAK,CAAEwQ,YAAY,EAAM5V,IAAKyV,EAAWrQ,MCJ3EoP,EAAoBqB,EAAI,GAGxBrB,EAAoB/O,EAAKqQ,GACjBva,QAAQpC,IAAIgE,OAAOwE,KAAK6S,EAAoBqB,GAAG5a,QAAO,CAACmH,EAAUgD,KACvEoP,EAAoBqB,EAAEzQ,GAAK0Q,EAAS1T,GAC7BA,IACL,KCNJoS,EAAoBuB,EAAKD,GAEZA,EAAL,kCCFRtB,EAAoBwB,SAAYF,MCDhCtB,EAAoByB,EAAI,WACvB,GAA0B,iBAAfC,WAAyB,OAAOA,WAC3C,IACC,OAAOjY,MAAQ,IAAIkY,SAAS,cAAb,GACd,MAAO1Q,GACR,GAAsB,iBAAX2Q,OAAqB,OAAOA,QALjB,GCAxB5B,EAAoBkB,EAAI,CAAClJ,EAAK6J,IAAUlZ,OAAOmZ,UAAUC,eAAeC,KAAKhK,EAAK6J,G,MCAlF,IAAII,EACAjC,EAAoByB,EAAES,gBAAeD,EAAYjC,EAAoByB,EAAEnP,SAAW,IACtF,IAAI6P,EAAWnC,EAAoByB,EAAEU,SACrC,IAAKF,GAAaE,IACbA,EAASC,gBACZH,EAAYE,EAASC,cAAcC,MAC/BJ,GAAW,CACf,IAAIK,EAAUH,EAASI,qBAAqB,UACzCD,EAAQxd,SAAQmd,EAAYK,EAAQA,EAAQxd,OAAS,GAAGud,KAK7D,IAAKJ,EAAW,MAAM,IAAI5c,MAAM,yDAChC4c,EAAYA,EAAUnD,QAAQ,OAAQ,IAAIA,QAAQ,QAAS,IAAIA,QAAQ,YAAa,KACpFkB,EAAoBwC,EAAIP,G,GnCbhB1f,EAAeyd,EAAoBuB,EACnC/e,EAAgBwd,EAAoB/O,EACpCxO,EAAW,IAAIsK,IACfrK,EAAW,IAAIqK,IACnBiT,EAAoBuB,EAAI,SAAUD,GAEhC,OADa/e,EAAa+e,IAEd7e,EAASkL,IAAI2T,GAAW,IAAM7e,EAAS+I,IAAI8V,GAAW,KAGpEtB,EAAoB/O,EAAI,SAAUqQ,GAEhC,OADa9e,EAAc8e,GACb9Y,OAAM,SAAU/D,GAC5B,IAAIge,EAAU/f,EAASiL,IAAI2T,GAAW5e,EAAS8I,IAAI8V,GAAW,OAC9D,GAAImB,EAAU,EAAG,CACf,IAAIC,EAAUngB,EAAa+e,GAQ3B,MAPA7c,EAAM+P,QACJ,iBACA8M,EACA,mCACAoB,EACA,IACFje,EAAMgJ,QAAUiV,EACVje,EAER,OAAO,IAAIsC,SAAQ,SAAUC,GAC3BC,YAAW,WACT,IAEI0b,EACKpV,KAAKC,MAGd/K,EAASyH,IAAIoX,EAASqB,GACtBjgB,EAASwH,IAAIoX,EAASmB,EAAU,GAChCzb,EAAQgZ,EAAoB/O,EAAEqQ,MAC7B,Y,MoClCb,IAAIsB,EAAkB,CACrB,IAAK,GAgBN5C,EAAoBqB,EAAEpO,EAAI,CAACqO,EAAS1T,KAE/BgV,EAAgBtB,IAElBY,cAAclC,EAAoBwC,EAAIxC,EAAoBuB,EAAED,KAK/D,IAAIuB,EAAqBpZ,KAAuB,iBAAIA,KAAuB,kBAAK,GAC5EqZ,EAA6BD,EAAmBva,KAAKrD,KAAK4d,GAC9DA,EAAmBva,KAvBC2P,IACnB,IAAKwI,EAAUsC,EAAaC,GAAW/K,EACvC,IAAI,IAAIgI,KAAY8C,EAChB/C,EAAoBkB,EAAE6B,EAAa9C,KACrCD,EAAoBM,EAAEL,GAAY8C,EAAY9C,IAIhD,IADG+C,GAASA,EAAQhD,GACdS,EAAS3b,QACd8d,EAAgBnC,EAASwC,OAAS,EACnCH,EAA2B7K,K,GnCnBxBtV,EAAOqd,EAAoBvN,EAC/BuN,EAAoBvN,EAAI,IAChBuN,EAAoB/O,EAAE,KAAKrM,KAAKjC,GoCDdqd,EAAoBvN,K","sources":["webpack://tweb/webpack/runtime/chunk loaded","webpack://tweb/webpack/runtime/compat","webpack://tweb/webpack/runtime/startup chunk dependencies","webpack://tweb/./src/environment/userAgent.ts","webpack://tweb/./src/helpers/context.ts","webpack://tweb/./src/lib/logger.ts","webpack://tweb/./src/helpers/schedulers/pause.ts","webpack://tweb/./src/lib/serviceWorker/cache.ts","webpack://tweb/./src/helpers/noop.ts","webpack://tweb/./src/helpers/cancellablePromise.ts","webpack://tweb/./src/helpers/blob/blobConstruct.ts","webpack://tweb/./src/helpers/blob/blobSafeMimeType.ts","webpack://tweb/./src/lib/files/memoryWriter.ts","webpack://tweb/./src/lib/files/cacheStorage.ts","webpack://tweb/./src/lib/serviceWorker/stream.ts","webpack://tweb/./src/helpers/schedulers/debounce.ts","webpack://tweb/./src/helpers/blob/readBlobAsUint8Array.ts","webpack://tweb/./src/helpers/blob/readBlobAsArrayBuffer.ts","webpack://tweb/./src/helpers/blob/readBlobAs.ts","webpack://tweb/./src/helpers/object/deepEqual.ts","webpack://tweb/./src/lib/files/idb.ts","webpack://tweb/./src/helpers/object/safeAssign.ts","webpack://tweb/./src/lib/serviceWorker/push.ts","webpack://tweb/./src/config/databases/state.ts","webpack://tweb/./src/lib/serviceWorker/serviceMessagePort.ts","webpack://tweb/./src/lib/serviceWorker/download.ts","webpack://tweb/./src/lib/serviceWorker/index.service.ts","webpack://tweb/./src/helpers/listenMessagePort.ts","webpack://tweb/./src/lib/serviceWorker/timeout.ts","webpack://tweb/webpack/bootstrap","webpack://tweb/webpack/runtime/define property getters","webpack://tweb/webpack/runtime/ensure chunk","webpack://tweb/webpack/runtime/get javascript chunk filename","webpack://tweb/webpack/runtime/get mini-css chunk filename","webpack://tweb/webpack/runtime/global","webpack://tweb/webpack/runtime/hasOwnProperty shorthand","webpack://tweb/webpack/runtime/publicPath","webpack://tweb/webpack/runtime/importScripts chunk loading","webpack://tweb/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","(() => {\n  if (typeof __webpack_require__ !== 'undefined') {\n    var oldGetScript = __webpack_require__.u;\n    var oldLoadScript = __webpack_require__.e;\n    var queryMap = new Map();\n    var countMap = new Map();\n    __webpack_require__.u = function (chunkId) {\n      var result = oldGetScript(chunkId);\n      return (\n        result + (queryMap.has(chunkId) ? '?' + queryMap.get(chunkId) : '')\n      );\n    };\n    __webpack_require__.e = function (chunkId) {\n      var result = oldLoadScript(chunkId);\n      return result.catch(function (error) {\n        var retries = countMap.has(chunkId) ? countMap.get(chunkId) : 999999;\n        if (retries < 1) {\n          var realSrc = oldGetScript(chunkId);\n          error.message =\n            'Loading chunk ' +\n            chunkId +\n            ' failed after 999999 retries.\\n(' +\n            realSrc +\n            ')';\n          error.request = realSrc;\n          throw error;\n        }\n        return new Promise(function (resolve) {\n          setTimeout(function () {\n            var retryAttempt = 999999 - retries + 1;\n            var retryAttemptString = '&retry-attempt=' + retryAttempt;\n            var cacheBust = (function () {\n              return Date.now();\n            })();\n            +retryAttemptString;\n            queryMap.set(chunkId, cacheBust);\n            countMap.set(chunkId, retries - 1);\n            resolve(__webpack_require__.e(chunkId));\n          }, 3000);\n        });\n      });\n    };\n  }\n})();\n","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn __webpack_require__.e(437).then(next);\n};","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport ctx from './ctx';\r\n\r\nexport const USER_AGENT = navigator ? navigator.userAgent : null;\r\nexport const IS_APPLE = navigator.userAgent.search(/OS X|iPhone|iPad|iOS/i) !== -1;\r\nexport const IS_ANDROID = navigator.userAgent.toLowerCase().indexOf('android') !== -1;\r\nexport const IS_CHROMIUM = /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);\r\n\r\n// https://stackoverflow.com/a/58065241\r\nexport const IS_APPLE_MOBILE = (/iPad|iPhone|iPod/.test(navigator.platform) ||\r\n  (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1)) &&\r\n  !(ctx as any).MSStream;\r\n\r\nexport const IS_SAFARI = !!('safari' in ctx) || !!(USER_AGENT && (/\\b(iPad|iPhone|iPod)\\b/.test(USER_AGENT) || (!!USER_AGENT.match('Safari') && !USER_AGENT.match('Chrome'))))/*  || true */;\r\nexport const IS_FIREFOX = navigator.userAgent.toLowerCase().indexOf('firefox') > -1;\r\n\r\nexport const IS_MOBILE_SAFARI = IS_SAFARI && IS_APPLE_MOBILE;\r\n\r\nexport const IS_MOBILE = /* screen.width && screen.width < 480 ||  */navigator.maxTouchPoints > 0 && navigator.userAgent.search(/iOS|iPhone OS|Android|BlackBerry|BB10|Series ?[64]0|J2ME|MIDP|opera mini|opera mobi|mobi.+Gecko|Windows Phone/i) != -1;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\n// в SW может быть сразу две переменных TRUE\r\nexport const IS_SERVICE_WORKER = typeof ServiceWorkerGlobalScope !== 'undefined' && self instanceof ServiceWorkerGlobalScope;\r\nexport const IS_WEB_WORKER = typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope && !IS_SERVICE_WORKER;\r\nexport const IS_WORKER = IS_WEB_WORKER || IS_SERVICE_WORKER;\r\n\r\nexport const getWindowClients = () => {\r\n  return (self as any as ServiceWorkerGlobalScope)\r\n  .clients\r\n  .matchAll({includeUncontrolled: false, type: 'window'});\r\n};\r\n\r\nexport const getLastWindowClient = () => getWindowClients().then((windowClients) => windowClients.slice(-1)[0]);\r\n\r\nconst postMessage = (listener: WindowClient | DedicatedWorkerGlobalScope, ...args: any[]) => {\r\n  try {\r\n    // @ts-ignore\r\n    listener.postMessage(...args);\r\n  } catch(err) {\r\n    console.error('[worker] postMessage error:', err, args);\r\n  }\r\n};\r\n\r\nconst notifyServiceWorker = (all: boolean, ...args: any[]) => {\r\n  getWindowClients().then((listeners) => {\r\n    if(!listeners.length) {\r\n      // console.trace('no listeners?', self, listeners);\r\n      return;\r\n    }\r\n\r\n    listeners.slice(all ? 0 : -1).forEach((listener) => {\r\n      postMessage(listener, ...args);\r\n    });\r\n  });\r\n};\r\n\r\nconst notifyWorker = (...args: any[]) => {\r\n  postMessage(self as any as DedicatedWorkerGlobalScope, ...args);\r\n};\r\n\r\nconst noop = () => {};\r\n\r\nexport const notifySomeone = IS_SERVICE_WORKER ? notifyServiceWorker.bind(null, false) : (IS_WEB_WORKER ? notifyWorker : noop);\r\nexport const notifyAll = IS_SERVICE_WORKER ? notifyServiceWorker.bind(null, true) : (IS_WEB_WORKER ? notifyWorker : noop);\r\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport DEBUG from '../config/debug';\nimport {IS_FIREFOX, IS_SAFARI} from '../environment/userAgent';\nimport {IS_SERVICE_WORKER, IS_WEB_WORKER} from '../helpers/context';\nimport dT from '../helpers/dT';\n\nexport enum LogTypes {\n  None = 0,\n  Error = 1,\n  Warn = 2,\n  Log = 4,\n  Debug = 8\n};\n\nexport const LOG_LEVELS = [LogTypes.None, LogTypes.Error, LogTypes.Warn, LogTypes.Log, LogTypes.Debug];\n\nconst IS_WEBKIT = IS_SAFARI || IS_FIREFOX;\n\n// let getCallerFunctionNameFromLine: (line: string) => string;\n// if(IS_WEBKIT) {\n//   getCallerFunctionNameFromLine = (line) => {\n//     const splitted = line.split('@');\n//     return splitted[0];\n//   };\n// } else {\n//   getCallerFunctionNameFromLine = (line: string) => {\n//     const splitted = line.trim().split(' ');\n//     if(splitted.length === 3) {\n//       return splitted[1].slice(splitted[1].lastIndexOf('.') + 1);\n//     }\n//   };\n// }\n\nconst STYLES_SUPPORTED = !IS_WEBKIT;\n// const LINE_INDEX = IS_WEBKIT ? 2 : 3;\n\n// function getCallerFunctionName() {\n//   const stack = new Error().stack;\n//   const lines = stack.split('\\n');\n//   const line = lines[LINE_INDEX] || lines[lines.length - 1];\n//   // const match = line.match(/\\.([^\\.]+?)\\s/);\n//   // line = match ? match[1] : line.trim();\n//   const caller = getCallerFunctionNameFromLine(line) || '<anonymous>';\n//   return '[' + caller + ']';\n// }\n\nexport const LOGGER_STYLES = {\n  reset: '\\x1b[0m',\n  bright: '\\x1b[1m',\n  dim: '\\x1b[2m',\n  underscore: '\\x1b[4m',\n  blink: '\\x1b[5m',\n  reverse: '\\x1b[7m',\n  hidden: '\\x1b[8m',\n  // Foreground (text) colors\n  fg: {\n    black: '\\x1b[30m',\n    red: '\\x1b[31m',\n    green: '\\x1b[32m',\n    yellow: '\\x1b[33m',\n    blue: '\\x1b[34m',\n    magenta: '\\x1b[35m',\n    cyan: '\\x1b[36m',\n    white: '\\x1b[37m'\n  },\n  // Background colors\n  bg: {\n    black: '\\x1b[40m',\n    red: '\\x1b[41m',\n    green: '\\x1b[42m',\n    yellow: '\\x1b[43m',\n    blue: '\\x1b[44m',\n    magenta: '\\x1b[45m',\n    cyan: '\\x1b[46m',\n    white: '\\x1b[47m'\n  }\n};\n\nexport type Logger = {\n  (...args: any[]): void;\n  warn(...args: any[]): void;\n  info(...args: any[]): void;\n  error(...args: any[]): void;\n  trace(...args: any[]): void;\n  debug(...args: any[]): void;\n  assert(...args: any[]): void;\n  // log(...args: any[]): void;\n  group(...args: any[]): void;\n  groupCollapsed(...args: any[]): void;\n  groupEnd(...args: any[]): void;\n  setPrefix(newPrefix: string): void;\n  setLevel(level: 0 | 1 | 2 | 3 | 4): void;\n  bindPrefix(prefix: string): Logger;\n};\n\nconst methods: ['debug' | 'info' | 'warn' | 'error' | 'assert' | 'trace'/*  | 'log' */ | 'group' | 'groupCollapsed' | 'groupEnd', LogTypes][] = [\n  ['debug', LogTypes.Debug],\n  ['info', LogTypes.Log],\n  ['warn', LogTypes.Warn],\n  ['error', LogTypes.Error],\n  ['assert', LogTypes.Error],\n  ['trace', LogTypes.Log],\n  ['group', LogTypes.Log],\n  ['groupCollapsed', LogTypes.Log],\n  ['groupEnd', LogTypes.Log]\n  // [\"log\", LogTypes.Log]\n];\n\nexport function logger(prefix: string, type: LogTypes = LogTypes.Log | LogTypes.Warn | LogTypes.Error, ignoreDebugReset = false, style = ''): Logger {\n  let originalPrefix: string;\n  if(!DEBUG && !ignoreDebugReset/*  || true */) {\n    type = LogTypes.Error;\n  }\n\n  if(!STYLES_SUPPORTED) {\n    style = '';\n  } else if(!style) {\n    if(IS_SERVICE_WORKER) style = LOGGER_STYLES.fg.yellow;\n    else if(IS_WEB_WORKER) style = LOGGER_STYLES.fg.cyan;\n  }\n\n  const originalStyle = style;\n  if(style) style = `%s ${style}%s`;\n  else style = '%s';\n\n  // level = LogLevels.log | LogLevels.warn | LogLevels.error | LogLevels.debug\n\n  const log: Logger = function(...args: any[]) {\n    return type & LogTypes.Log && console.log(style, dT(), prefix, /* getCallerFunctionName(), */ ...args);\n  } as any;\n\n  methods.forEach(([method, logType]) => {\n    log[method] = function(...args: any[]) {\n      return type & logType && console[method](style, dT(), prefix, /* getCallerFunctionName(), */ ...args);\n    };\n  });\n\n  log.setPrefix = function(newPrefix: string) {\n    originalPrefix = newPrefix;\n    prefix = '[' + newPrefix + ']';\n  };\n\n  log.setPrefix(prefix);\n\n  log.setLevel = function(level: 0 | 1 | 2 | 3 | 4) {\n    type = LOG_LEVELS.slice(0, level + 1).reduce((acc, v) => acc | v, 0) as any;\n  };\n\n  log.bindPrefix = function(prefix: string) {\n    return logger(`${originalPrefix}] [${prefix}`, type, ignoreDebugReset, originalStyle);\n  };\n\n  return log;\n};\n","export default function pause(ms: number) {\r\n  return new Promise<void>((resolve) => {\r\n    setTimeout(resolve, ms);\r\n  });\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport pause from '../../helpers/schedulers/pause';\r\n\r\nconst ctx = self as any as ServiceWorkerGlobalScope;\r\nexport const CACHE_ASSETS_NAME = 'cachedAssets';\r\n\r\nfunction isCorrectResponse(response: Response) {\r\n  return response.ok && response.status === 200;\r\n}\r\n\r\nfunction timeoutRace<T extends Promise<any>>(promise: T) {\r\n  return Promise.race([\r\n    promise,\r\n    pause(10000).then(() => Promise.reject())\r\n  ]);\r\n}\r\n\r\nexport async function requestCache(event: FetchEvent) {\r\n  try {\r\n    // const cache = await ctx.caches.open(CACHE_ASSETS_NAME);\r\n    const cache = await timeoutRace(ctx.caches.open(CACHE_ASSETS_NAME));\r\n    const file = await timeoutRace(cache.match(event.request, {ignoreVary: true}));\r\n\r\n    if(file && isCorrectResponse(file)) {\r\n      return file;\r\n    }\r\n\r\n    const headers: HeadersInit = {'Vary': '*'};\r\n    let response = await fetch(event.request, {headers});\r\n    if(isCorrectResponse(response)) {\r\n      cache.put(event.request, response.clone());\r\n    } else if(response.status === 304) { // possible fix for 304 in Safari\r\n      const url = event.request.url.replace(/\\?.+$/, '') + '?' + (Math.random() * 100000 | 0);\r\n      response = await fetch(url, {headers});\r\n      if(isCorrectResponse(response)) {\r\n        cache.put(event.request, response.clone());\r\n      }\r\n    }\r\n\r\n    return response;\r\n  } catch(err) {\r\n    return fetch(event.request);\r\n  }\r\n}\r\n","export default function noop() {}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport noop from './noop';\r\n\r\nexport interface CancellablePromise<T> extends Promise<T> {\r\n  resolve?: (value: T) => void,\r\n  reject?: (...args: any[]) => void,\r\n  cancel?: (reason?: any) => void,\r\n\r\n  notify?: (...args: any[]) => void,\r\n  notifyAll?: (...args: any[]) => void,\r\n  lastNotify?: any,\r\n  listeners?: Array<(...args: any[]) => void>,\r\n  addNotifyListener?: (callback: (...args: any[]) => void) => void,\r\n\r\n  isFulfilled?: boolean,\r\n  isRejected?: boolean\r\n}\r\n\r\nexport default function deferredPromise<T>() {\r\n  const deferredHelper: any = {\r\n    isFulfilled: false,\r\n    isRejected: false,\r\n\r\n    notify: () => {},\r\n    notifyAll: (...args: any[]) => {\r\n      deferredHelper.lastNotify = args;\r\n      deferredHelper.listeners.forEach((callback: any) => callback(...args));\r\n    },\r\n\r\n    listeners: [],\r\n    addNotifyListener: (callback: (...args: any[]) => void) => {\r\n      if(deferredHelper.lastNotify) {\r\n        callback(...deferredHelper.lastNotify);\r\n      }\r\n\r\n      deferredHelper.listeners.push(callback);\r\n    }\r\n  };\r\n\r\n  const deferred: CancellablePromise<T> = new Promise<T>((resolve, reject) => {\r\n    deferredHelper.resolve = (value: T) => {\r\n      if(deferred.isFulfilled || deferred.isRejected) return;\r\n\r\n      deferred.isFulfilled = true;\r\n      resolve(value);\r\n    };\r\n\r\n    deferredHelper.reject = (...args: any[]) => {\r\n      if(deferred.isRejected || deferred.isFulfilled) return;\r\n\r\n      deferred.isRejected = true;\r\n      reject(...args);\r\n    };\r\n  });\r\n\r\n  // @ts-ignore\r\n  /* deferred.then = (resolve: (value: T) => any, reject: (...args: any[]) => any) => {\r\n    const n = deferredPromise<ReturnType<typeof resolve>>();\r\n\r\n  }; */\r\n\r\n  deferred.catch(noop).finally(() => {\r\n    deferred.notify = deferred.notifyAll = deferred.lastNotify = null;\r\n    deferred.listeners.length = 0;\r\n\r\n    if(deferred.cancel) {\r\n      deferred.cancel = noop;\r\n    }\r\n  });\r\n\r\n  Object.assign(deferred, deferredHelper);\r\n\r\n  return deferred;\r\n}\r\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n *\n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\nimport blobSafeMimeType from './blobSafeMimeType';\n\nexport default function blobConstruct<T extends Uint8Array | string>(blobParts: Array<T> | T, mimeType: string = ''): Blob {\n  if(!Array.isArray(blobParts)) {\n    blobParts = [blobParts];\n  }\n\n  const safeMimeType = blobSafeMimeType(mimeType);\n  const blob = new Blob(blobParts, {type: safeMimeType});\n  return blob;\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n *\n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\n// https://www.iana.org/assignments/media-types/media-types.xhtml\nexport default function blobSafeMimeType(mimeType: string) {\n  if([\n    'image/jpeg',\n    'image/png',\n    'image/gif',\n    'image/svg+xml',\n    'image/webp',\n    'image/bmp',\n    'video/mp4',\n    'video/webm',\n    'video/quicktime',\n    'audio/ogg',\n    'audio/mpeg',\n    'audio/mp4',\n    'audio/wav', // though it is not in list\n    'application/json',\n    'application/pdf'\n  ].indexOf(mimeType) === -1) {\n    return 'application/octet-stream';\n  }\n\n  return mimeType;\n}\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport blobConstruct from '../../helpers/blob/blobConstruct';\r\nimport StreamWriter from './streamWriter';\r\n\r\nexport default class MemoryWriter implements StreamWriter {\r\n  private bytes: Uint8Array;\r\n\r\n  constructor(\r\n    private mimeType: string,\r\n    private size: number,\r\n    private saveFileCallback?: (blob: Blob) => Promise<Blob>\r\n  ) {\r\n    this.bytes = new Uint8Array(size);\r\n  }\r\n\r\n  public async write(part: Uint8Array, offset: number) {\r\n    // sometimes file size can be bigger than the prov\r\n    const endOffset = offset + part.byteLength;\r\n    if(endOffset > this.bytes.byteLength) {\r\n      const newBytes = new Uint8Array(endOffset);\r\n      newBytes.set(this.bytes, 0);\r\n      this.bytes = newBytes;\r\n    }\r\n\r\n    this.bytes.set(part, offset);\r\n  };\r\n\r\n  public truncate() {\r\n    this.bytes = new Uint8Array();\r\n  }\r\n\r\n  public trim(size: number) {\r\n    this.bytes = this.bytes.slice(0, size);\r\n  }\r\n\r\n  public finalize(saveToStorage = true) {\r\n    const blob = blobConstruct(this.bytes, this.mimeType);\r\n\r\n    if(saveToStorage && this.saveFileCallback) {\r\n      this.saveFileCallback(blob);\r\n    }\r\n\r\n    return blob;\r\n  }\r\n\r\n  public getParts() {\r\n    return this.bytes;\r\n  }\r\n\r\n  public replaceParts(parts: Uint8Array) {\r\n    this.bytes = parts;\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport Modes from '../../config/modes';\r\nimport blobConstruct from '../../helpers/blob/blobConstruct';\r\nimport MemoryWriter from './memoryWriter';\r\nimport FileManager from './memoryWriter';\r\nimport FileStorage from './fileStorage';\r\nimport makeError from '../../helpers/makeError';\r\nimport deferredPromise from '../../helpers/cancellablePromise';\r\n\r\nexport type CacheStorageDbName = 'cachedFiles' | 'cachedStreamChunks' | 'cachedAssets';\r\n\r\nexport default class CacheStorageController implements FileStorage {\r\n  private static STORAGES: CacheStorageController[] = [];\r\n  private openDbPromise: Promise<Cache>;\r\n\r\n  private useStorage = true;\r\n\r\n  // private log: ReturnType<typeof logger> = logger('CS');\r\n\r\n  constructor(private dbName: CacheStorageDbName) {\r\n    if(Modes.test) {\r\n      this.dbName += '_test';\r\n    }\r\n\r\n    if(CacheStorageController.STORAGES.length) {\r\n      this.useStorage = CacheStorageController.STORAGES[0].useStorage;\r\n    }\r\n\r\n    this.openDatabase();\r\n    CacheStorageController.STORAGES.push(this);\r\n  }\r\n\r\n  private openDatabase(): Promise<Cache> {\r\n    return this.openDbPromise ?? (this.openDbPromise = caches.open(this.dbName));\r\n  }\r\n\r\n  public delete(entryName: string) {\r\n    return this.timeoutOperation((cache) => cache.delete('/' + entryName));\r\n  }\r\n\r\n  public deleteAll() {\r\n    return caches.delete(this.dbName);\r\n  }\r\n\r\n  public get(entryName: string) {\r\n    return this.timeoutOperation((cache) => cache.match('/' + entryName));\r\n  }\r\n\r\n  public save(entryName: string, response: Response) {\r\n    // return new Promise((resolve) => {}); // DEBUG\r\n    return this.timeoutOperation((cache) => cache.put('/' + entryName, response));\r\n  }\r\n\r\n  public getFile(fileName: string, method: 'blob' | 'json' | 'text' = 'blob'): Promise<any> {\r\n    /* if(method === 'blob') {\r\n      return Promise.reject();\r\n    } */\r\n\r\n    // const str = `get fileName: ${fileName}`;\r\n    // console.time(str);\r\n    return this.get(fileName).then((response) => {\r\n      if(!response) {\r\n        // console.warn('getFile:', response, fileName);\r\n        throw makeError('NO_ENTRY_FOUND');\r\n      }\r\n\r\n      const promise = response[method]();\r\n      // promise.then(() => {\r\n      //   console.timeEnd(str);\r\n      // });\r\n      return promise;\r\n    });\r\n  }\r\n\r\n  public saveFile(fileName: string, blob: Blob | Uint8Array) {\r\n    // return Promise.resolve(blobConstruct([blob]));\r\n    if(!(blob instanceof Blob)) {\r\n      blob = blobConstruct(blob);\r\n    }\r\n\r\n    const response = new Response(blob, {\r\n      headers: {\r\n        'Content-Length': '' + blob.size\r\n      }\r\n    });\r\n\r\n    return this.save(fileName, response).then(() => blob as Blob);\r\n  }\r\n\r\n  public timeoutOperation<T>(callback: (cache: Cache) => Promise<T>) {\r\n    if(!this.useStorage) {\r\n      return Promise.reject(makeError('STORAGE_OFFLINE'));\r\n    }\r\n\r\n    return new Promise<T>(async(resolve, reject) => {\r\n      let rejected = false;\r\n      const timeout = setTimeout(() => {\r\n        reject();\r\n        // console.warn('CACHESTORAGE TIMEOUT');\r\n        rejected = true;\r\n      }, 15e3);\r\n\r\n      try {\r\n        const cache = await this.openDatabase();\r\n        if(!cache) {\r\n          this.useStorage = false;\r\n          this.openDbPromise = undefined;\r\n          throw 'no cache?';\r\n        }\r\n\r\n        const res = await callback(cache);\r\n\r\n        if(rejected) return;\r\n        resolve(res);\r\n      } catch(err) {\r\n        reject(err);\r\n      }\r\n\r\n      clearTimeout(timeout);\r\n    });\r\n  }\r\n\r\n  public prepareWriting(fileName: string, fileSize: number, mimeType: string) {\r\n    return {\r\n      deferred: deferredPromise<Blob>(),\r\n      getWriter: () => {\r\n        const writer = new MemoryWriter(mimeType, fileSize, (blob) => {\r\n          return this.saveFile(fileName, blob).catch(() => blob);\r\n        });\r\n\r\n        return writer;\r\n      }\r\n    };\r\n  }\r\n\r\n  public static toggleStorage(enabled: boolean, clearWrite: boolean) {\r\n    return Promise.all(this.STORAGES.map((storage) => {\r\n      storage.useStorage = enabled;\r\n\r\n      if(!clearWrite) {\r\n        return;\r\n      }\r\n\r\n      if(!enabled) {\r\n        return storage.deleteAll();\r\n      }\r\n    }));\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport readBlobAsUint8Array from '../../helpers/blob/readBlobAsUint8Array';\r\nimport deferredPromise, {CancellablePromise} from '../../helpers/cancellablePromise';\r\nimport debounce from '../../helpers/schedulers/debounce';\r\nimport {InputFileLocation} from '../../layer';\r\nimport CacheStorageController from '../files/cacheStorage';\r\nimport {DownloadOptions, MyUploadFile} from '../mtproto/apiFileManager';\r\nimport {getMtprotoMessagePort, log, serviceMessagePort} from './index.service';\r\nimport {ServiceRequestFilePartTaskPayload} from './serviceMessagePort';\r\nimport timeout from './timeout';\r\n\r\nconst deferredPromises: Map<MessagePort, {[taskId: string]: CancellablePromise<MyUploadFile>}> = new Map();\r\nconst cacheStorage = new CacheStorageController('cachedStreamChunks');\r\nconst CHUNK_TTL = 86400;\r\nconst CHUNK_CACHED_TIME_HEADER = 'Time-Cached';\r\nconst USE_CACHE = true;\r\n\r\nconst clearOldChunks = () => {\r\n  return cacheStorage.timeoutOperation((cache) => {\r\n    return cache.keys().then((requests) => {\r\n      const filtered: Map<StreamId, Request> = new Map();\r\n      const timestamp = Date.now() / 1000 | 0;\r\n      for(const request of requests) {\r\n        const match = request.url.match(/\\/(\\d+?)\\?/);\r\n        if(match && !filtered.has(match[1])) {\r\n          filtered.set(match[1], request);\r\n        }\r\n      }\r\n\r\n      const promises: Promise<any>[] = [];\r\n      for(const [id, request] of filtered) {\r\n        const promise = cache.match(request).then((response) => {\r\n          if((+response.headers.get(CHUNK_CACHED_TIME_HEADER) + CHUNK_TTL) <= timestamp) {\r\n            log('will delete stream chunk:', id);\r\n            return cache.delete(request, {ignoreSearch: true, ignoreVary: true});\r\n          }\r\n        });\r\n\r\n        promises.push(promise);\r\n      }\r\n\r\n      return Promise.all(promises);\r\n    });\r\n  });\r\n};\r\n\r\nsetInterval(clearOldChunks, 1800e3);\r\nsetInterval(() => {\r\n  const mtprotoMessagePort = getMtprotoMessagePort();\r\n  for(const [messagePort, promises] of deferredPromises) {\r\n    if(messagePort !== mtprotoMessagePort) {\r\n      for(const taskId in promises) {\r\n        const promise = promises[taskId];\r\n        promise.reject();\r\n      }\r\n\r\n      deferredPromises.delete(messagePort);\r\n    }\r\n  }\r\n}, 120e3);\r\n\r\ntype StreamRange = [number, number];\r\ntype StreamId = DocId;\r\nconst streams: Map<StreamId, Stream> = new Map();\r\nclass Stream {\r\n  private destroyDebounced: () => void;\r\n  private id: StreamId;\r\n  private limitPart: number;\r\n  private loadedOffsets: Set<number> = new Set();\r\n\r\n  constructor(private info: DownloadOptions) {\r\n    this.id = Stream.getId(info);\r\n    streams.set(this.id, this);\r\n\r\n    // ! если грузить очень большое видео чанками по 512Кб в мобильном Safari, то стрим не запустится\r\n    this.limitPart = info.size > (75 * 1024 * 1024) ? STREAM_CHUNK_UPPER_LIMIT : STREAM_CHUNK_MIDDLE_LIMIT;\r\n    this.destroyDebounced = debounce(this.destroy, 150000, false, true);\r\n  }\r\n\r\n  private destroy = () => {\r\n    streams.delete(this.id);\r\n  };\r\n\r\n  private async requestFilePartFromWorker(alignedOffset: number, limit: number, fromPreload = false) {\r\n    const payload: ServiceRequestFilePartTaskPayload = {\r\n      docId: this.id,\r\n      dcId: this.info.dcId,\r\n      offset: alignedOffset,\r\n      limit\r\n    };\r\n\r\n    const taskId = JSON.stringify(payload);\r\n\r\n    const mtprotoMessagePort = getMtprotoMessagePort();\r\n    let promises = deferredPromises.get(mtprotoMessagePort);\r\n    if(!promises) {\r\n      deferredPromises.set(mtprotoMessagePort, promises = {});\r\n    }\r\n\r\n    let deferred = promises[taskId];\r\n    if(deferred) {\r\n      return deferred.then((uploadFile) => uploadFile.bytes);\r\n    }\r\n\r\n    this.loadedOffsets.add(alignedOffset);\r\n\r\n    deferred = promises[taskId] = deferredPromise();\r\n\r\n    serviceMessagePort.invoke('requestFilePart', payload, undefined, mtprotoMessagePort)\r\n    .then(deferred.resolve, deferred.reject).finally(() => {\r\n      if(promises[taskId] === deferred) {\r\n        delete promises[taskId];\r\n\r\n        if(!Object.keys(promises).length) {\r\n          deferredPromises.delete(mtprotoMessagePort);\r\n        }\r\n      }\r\n    });\r\n\r\n    const bytesPromise = deferred.then((uploadFile) => uploadFile.bytes);\r\n\r\n    if(USE_CACHE) {\r\n      this.saveChunkToCache(bytesPromise, alignedOffset, limit);\r\n      !fromPreload && this.preloadChunks(alignedOffset, alignedOffset + (this.limitPart * 15));\r\n    }\r\n\r\n    return bytesPromise;\r\n  }\r\n\r\n  private requestFilePartFromCache(alignedOffset: number, limit: number, fromPreload?: boolean) {\r\n    if(!USE_CACHE) {\r\n      return Promise.resolve();\r\n    }\r\n\r\n    const key = this.getChunkKey(alignedOffset, limit);\r\n    return cacheStorage.getFile(key).then((blob: Blob) => {\r\n      return fromPreload ? new Uint8Array() : readBlobAsUint8Array(blob);\r\n    }, (error: ApiError) => {\r\n      if(error.type === 'NO_ENTRY_FOUND') {\r\n        return;\r\n      }\r\n    });\r\n  }\r\n\r\n  private requestFilePart(alignedOffset: number, limit: number, fromPreload?: boolean) {\r\n    return this.requestFilePartFromCache(alignedOffset, limit, fromPreload).then((bytes) => {\r\n      return bytes || this.requestFilePartFromWorker(alignedOffset, limit, fromPreload);\r\n    });\r\n  }\r\n\r\n  private saveChunkToCache(deferred: Promise<Uint8Array>, alignedOffset: number, limit: number) {\r\n    return deferred.then((bytes) => {\r\n      const key = this.getChunkKey(alignedOffset, limit);\r\n      const response = new Response(bytes, {\r\n        headers: {\r\n          'Content-Length': '' + bytes.length,\r\n          'Content-Type': 'application/octet-stream',\r\n          [CHUNK_CACHED_TIME_HEADER]: '' + (Date.now() / 1000 | 0)\r\n        }\r\n      });\r\n\r\n      return cacheStorage.save(key, response);\r\n    });\r\n  }\r\n\r\n  private preloadChunk(offset: number) {\r\n    if(this.loadedOffsets.has(offset)) {\r\n      return;\r\n    }\r\n\r\n    this.loadedOffsets.add(offset);\r\n    this.requestFilePart(offset, this.limitPart, true);\r\n  }\r\n\r\n  private preloadChunks(offset: number, end: number) {\r\n    if(end > this.info.size) {\r\n      end = this.info.size;\r\n    }\r\n\r\n    if(!offset) { // load last chunk for bounds\r\n      this.preloadChunk(alignOffset(offset, this.limitPart));\r\n    } else { // don't preload next chunks before the start\r\n      for(; offset < end; offset += this.limitPart) {\r\n        this.preloadChunk(offset);\r\n      }\r\n    }\r\n  }\r\n\r\n  public requestRange(range: StreamRange) {\r\n    this.destroyDebounced();\r\n\r\n    const possibleResponse = responseForSafariFirstRange(range, this.info.mimeType, this.info.size);\r\n    if(possibleResponse) {\r\n      return possibleResponse;\r\n    }\r\n\r\n    let [offset, end] = range;\r\n\r\n    /* if(info.size > limitPart && isSafari && offset === limitPart) {\r\n      //end = info.size - 1;\r\n      //offset = info.size - 1 - limitPart;\r\n      offset = info.size - (info.size % limitPart);\r\n    } */\r\n\r\n    const limit = end && end < this.limitPart ? alignLimit(end - offset + 1) : this.limitPart;\r\n    const alignedOffset = alignOffset(offset, limit);\r\n\r\n    if(!end) {\r\n      end = Math.min(offset + limit, this.info.size - 1);\r\n    }\r\n\r\n    return this.requestFilePart(alignedOffset, limit).then((ab) => {\r\n      // log.debug('[stream] requestFilePart result:', result);\r\n\r\n      // if(isSafari) {\r\n      if(offset !== alignedOffset || end !== (alignedOffset + limit)) {\r\n        ab = ab.slice(offset - alignedOffset, end - alignedOffset + 1);\r\n      }\r\n\r\n      const headers: Record<string, string> = {\r\n        'Accept-Ranges': 'bytes',\r\n        'Content-Range': `bytes ${offset}-${offset + ab.byteLength - 1}/${this.info.size || '*'}`,\r\n        'Content-Length': `${ab.byteLength}`\r\n      };\r\n\r\n      if(this.info.mimeType) {\r\n        headers['Content-Type'] = this.info.mimeType;\r\n      }\r\n\r\n      // simulate slow connection\r\n      // setTimeout(() => {\r\n      return new Response(ab, {\r\n        status: 206,\r\n        statusText: 'Partial Content',\r\n        headers\r\n      });\r\n      // }, 2.5e3);\r\n    });\r\n  }\r\n\r\n  private getChunkKey(alignedOffset: number, limit: number) {\r\n    return this.id + '?offset=' + alignedOffset + '&limit=' + limit;\r\n  }\r\n\r\n  public static get(info: DownloadOptions) {\r\n    return streams.get(this.getId(info)) ?? new Stream(info);\r\n  }\r\n\r\n  private static getId(info: DownloadOptions) {\r\n    return (info.location as InputFileLocation.inputDocumentFileLocation).id;\r\n  }\r\n}\r\n\r\nexport default function onStreamFetch(event: FetchEvent, params: string) {\r\n  const range = parseRange(event.request.headers.get('Range'));\r\n  const info: DownloadOptions = JSON.parse(decodeURIComponent(params));\r\n  const stream = Stream.get(info);\r\n\r\n  // log.debug('[stream]', url, offset, end);\r\n\r\n  event.respondWith(Promise.race([\r\n    timeout(45 * 1000),\r\n    stream.requestRange(range)\r\n  ]));\r\n}\r\n\r\nfunction responseForSafariFirstRange(range: StreamRange, mimeType: string, size: number): Response {\r\n  if(range[0] === 0 && range[1] === 1) {\r\n    return new Response(new Uint8Array(2).buffer, {\r\n      status: 206,\r\n      statusText: 'Partial Content',\r\n      headers: {\r\n        'Accept-Ranges': 'bytes',\r\n        'Content-Range': `bytes 0-1/${size || '*'}`,\r\n        'Content-Length': '2',\r\n        'Content-Type': mimeType || 'video/mp4'\r\n      }\r\n    });\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n/* const STREAM_CHUNK_UPPER_LIMIT = 256 * 1024;\r\nconst SMALLEST_CHUNK_LIMIT = 256 * 4; */\r\n/* const STREAM_CHUNK_UPPER_LIMIT = 1024 * 1024;\r\nconst SMALLEST_CHUNK_LIMIT = 1024 * 4; */\r\nconst STREAM_CHUNK_MIDDLE_LIMIT = 512 * 1024;\r\nconst STREAM_CHUNK_UPPER_LIMIT = 1024 * 1024;\r\nconst SMALLEST_CHUNK_LIMIT = 512 * 4;\r\n\r\nfunction parseRange(header: string): StreamRange {\r\n  if(!header) return [0, 0];\r\n  const [, chunks] = header.split('=');\r\n  const ranges = chunks.split(', ');\r\n  const [offset, end] = ranges[0].split('-');\r\n\r\n  return [+offset, +end || 0];\r\n}\r\n\r\nfunction alignOffset(offset: number, base = SMALLEST_CHUNK_LIMIT) {\r\n  return offset - (offset % base);\r\n}\r\n\r\nfunction alignLimit(limit: number) {\r\n  return 2 ** Math.ceil(Math.log(limit) / Math.log(2));\r\n}\r\n","// * Jolly Cobra's schedulers\r\n\r\nimport ctx from '../../environment/ctx';\r\nimport {AnyFunction, Awaited} from '../../types';\r\nimport noop from '../noop';\r\n\r\nexport type DebounceReturnType<F extends AnyFunction> = {\r\n  (...args: Parameters<F>): Promise<Awaited<ReturnType<F>>>;\r\n  clearTimeout(): void;\r\n  isDebounced(): boolean;\r\n};\r\n\r\nexport default function debounce<F extends AnyFunction>(\r\n  fn: F,\r\n  ms: number,\r\n  shouldRunFirst = true,\r\n  shouldRunLast = true\r\n): DebounceReturnType<F> {\r\n  let waitingTimeout: number;\r\n  let waitingPromise: Promise<Awaited<ReturnType<F>>>, resolve: (result: any) => void, reject: () => void;\r\n  let hadNewCall = false;\r\n\r\n  const invoke = (args: Parameters<F>) => {\r\n    const _resolve = resolve, _reject = reject;\r\n    try {\r\n      const result = fn.apply(null, args);\r\n      _resolve(result);\r\n    } catch(err) {\r\n      console.error('debounce error', err);\r\n      // @ts-ignore\r\n      _reject(err);\r\n    }\r\n  };\r\n\r\n  const debounce = (...args: Parameters<F>) => {\r\n    if(!waitingPromise) waitingPromise = new Promise((_resolve, _reject) => (resolve = _resolve, reject = _reject));\r\n\r\n    if(waitingTimeout) {\r\n      clearTimeout(waitingTimeout);\r\n      hadNewCall = true;\r\n      reject();\r\n      waitingPromise = new Promise((_resolve, _reject) => (resolve = _resolve, reject = _reject));\r\n    } else if(shouldRunFirst) {\r\n      invoke(args);\r\n      hadNewCall = false;\r\n    }\r\n\r\n    const _waitingTimeout = ctx.setTimeout(() => {\r\n      // will run if should run last or first but with new call\r\n      if(shouldRunLast && (!shouldRunFirst || hadNewCall)) {\r\n        invoke(args);\r\n      }\r\n\r\n      // if debounce was called during invoking\r\n      if(waitingTimeout === _waitingTimeout) {\r\n        waitingTimeout = waitingPromise = resolve = reject = undefined;\r\n        hadNewCall = false;\r\n      }\r\n    }, ms);\r\n\r\n    waitingTimeout = _waitingTimeout;\r\n    waitingPromise.catch(noop);\r\n    return waitingPromise;\r\n  };\r\n\r\n  debounce.clearTimeout = () => {\r\n    if(waitingTimeout) {\r\n      ctx.clearTimeout(waitingTimeout);\r\n      reject();\r\n      waitingTimeout = waitingPromise = resolve = reject = undefined;\r\n      hadNewCall = false;\r\n    }\r\n  };\r\n\r\n  debounce.isDebounced = () => !!waitingTimeout;\r\n\r\n  return debounce;\r\n}\r\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport readBlobAsArrayBuffer from './readBlobAsArrayBuffer';\n\nexport default function readBlobAsUint8Array(blob: Blob) {\n  return readBlobAsArrayBuffer(blob).then((buffer) => new Uint8Array(buffer));\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport readBlobAs from './readBlobAs';\n\nexport default function readBlobAsArrayBuffer(blob: Blob) {\n  return readBlobAs(blob, 'readAsArrayBuffer');\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\n// import { IS_WEB_WORKER } from \"../context\";\n\n// const id = IS_WEB_WORKER ? Math.random() * 0x1000 | 0 : 0;\nexport default function readBlobAs(blob: Blob, method: 'readAsText'): Promise<string>;\nexport default function readBlobAs(blob: Blob, method: 'readAsDataURL'): Promise<string>;\nexport default function readBlobAs(blob: Blob, method: 'readAsArrayBuffer'): Promise<ArrayBuffer>;\nexport default function readBlobAs(blob: Blob, method: 'readAsArrayBuffer' | 'readAsText' | 'readAsDataURL'): Promise<any> {\n  // const perf = performance.now();\n  return new Promise<any>((resolve) => {\n    const reader = new FileReader();\n    reader.addEventListener('loadend', (e) => {\n      // console.log(`readBlobAs [${id}] ${method} time ${performance.now() - perf}`);\n      resolve(e.target.result);\n    });\n    reader[method](blob);\n  });\n}\n","export default function deepEqual(x: any, y: any): boolean {\n  const ok = Object.keys, tx = typeof x, ty = typeof y;\n  return x && y && tx === 'object' && tx === ty ? (\n    ok(x).length === ok(y).length &&\n      ok(x).every((key) => deepEqual(x[key], y[key]))\n  ) : (x === y);\n}\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n *\r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport {Database} from '../../config/databases';\r\nimport Modes from '../../config/modes';\r\nimport makeError from '../../helpers/makeError';\r\nimport safeAssign from '../../helpers/object/safeAssign';\r\nimport {logger} from '../logger';\r\n\r\n/**\r\n * https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/createIndex\r\n */\r\nexport type IDBIndex = {\r\n  indexName: string,\r\n  keyPath: string,\r\n  objectParameters: IDBIndexParameters\r\n};\r\n\r\nexport type IDBStore = {\r\n  name: string,\r\n  indexes?: IDBIndex[]\r\n};\r\n\r\nexport type IDBOptions = {\r\n  name?: string,\r\n  storeName: string,\r\n  stores?: IDBStore[],\r\n  version?: number\r\n};\r\n\r\nconst DEBUG = false;\r\n\r\nexport class IDB {\r\n  private static INSTANCES: IDB[] = [];\r\n  private openDbPromise: Promise<IDBDatabase>;\r\n  private db: IDBDatabase;\r\n  private storageIsAvailable: boolean;\r\n  private log: ReturnType<typeof logger>;\r\n  private name: string;\r\n  private version: number;\r\n  private stores: IDBStore[];\r\n\r\n  constructor(db: Database<any>) {\r\n    safeAssign(this, db);\r\n\r\n    if(Modes.test) {\r\n      this.name += '_test';\r\n    }\r\n\r\n    this.storageIsAvailable = true;\r\n    this.log = logger(['IDB', db.name].join('-'));\r\n    this.log('constructor');\r\n\r\n    this.openDatabase(true);\r\n\r\n    IDB.INSTANCES.push(this);\r\n  }\r\n\r\n  public isAvailable() {\r\n    return this.storageIsAvailable;\r\n  }\r\n\r\n  public openDatabase(createNew = false): Promise<IDBDatabase> {\r\n    if(this.openDbPromise && !createNew) {\r\n      return this.openDbPromise;\r\n    }\r\n\r\n    const createIndexes = (os: IDBObjectStore, store: IDBStore) => {\r\n      const indexNames = Array.from(os.indexNames);\r\n      for(const indexName of indexNames) {\r\n        os.deleteIndex(indexName);\r\n      }\r\n\r\n      if(!store.indexes?.length) {\r\n        return;\r\n      }\r\n\r\n      for(const index of store.indexes) {\r\n        if(os.indexNames.contains(index.indexName)) {\r\n          continue;\r\n        }\r\n\r\n        os.createIndex(index.indexName, index.keyPath, index.objectParameters);\r\n      }\r\n    };\r\n\r\n    const createObjectStore = (db: IDBDatabase, store: IDBStore) => {\r\n      const os = db.createObjectStore(store.name);\r\n      createIndexes(os, store);\r\n    };\r\n\r\n    try {\r\n      var request = indexedDB.open(this.name, this.version);\r\n\r\n      if(!request) {\r\n        return Promise.reject();\r\n      }\r\n    } catch(error) {\r\n      this.log.error('error opening db', (error as Error).message);\r\n      this.storageIsAvailable = false;\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    let finished = false;\r\n    setTimeout(() => {\r\n      if(!finished) {\r\n        request.onerror(makeError('IDB_CREATE_TIMEOUT') as Event);\r\n      }\r\n    }, 3000);\r\n\r\n    return this.openDbPromise = new Promise<IDBDatabase>((resolve, reject) => {\r\n      request.onsuccess = (event) => {\r\n        finished = true;\r\n        const db = request.result;\r\n        let calledNew = false;\r\n\r\n        this.log('Opened');\r\n\r\n        db.onerror = (error) => {\r\n          this.storageIsAvailable = false;\r\n          this.log.error('Error creating/accessing IndexedDB database', error);\r\n          reject(error);\r\n        };\r\n\r\n        db.onclose = (e) => {\r\n          this.log.error('closed:', e);\r\n          !calledNew && this.openDatabase();\r\n        };\r\n\r\n        db.onabort = (e) => {\r\n          this.log.error('abort:', e);\r\n          const transaction = e.target as IDBTransaction;\r\n\r\n          this.openDatabase(calledNew = true);\r\n\r\n          if(transaction.onerror) {\r\n            transaction.onerror(e);\r\n          }\r\n\r\n          db.close();\r\n        };\r\n\r\n        db.onversionchange = (e) => {\r\n          this.log.error('onversionchange, lol?');\r\n        };\r\n\r\n        resolve(this.db = db);\r\n      };\r\n\r\n      request.onerror = (event) => {\r\n        finished = true;\r\n        this.storageIsAvailable = false;\r\n        this.log.error('Error creating/accessing IndexedDB database', event);\r\n        reject(event);\r\n      };\r\n\r\n      request.onupgradeneeded = (event) => {\r\n        finished = true;\r\n        this.log.warn('performing idb upgrade from', event.oldVersion, 'to', event.newVersion);\r\n\r\n        const target = event.target as IDBOpenDBRequest;\r\n        const db = target.result;\r\n        this.stores.forEach((store) => {\r\n          /* if(db.objectStoreNames.contains(store.name)) {\r\n            //if(event.oldVersion === 1) {\r\n              db.deleteObjectStore(store.name);\r\n            //}\r\n          } */\r\n\r\n          if(!db.objectStoreNames.contains(store.name)) {\r\n            createObjectStore(db, store);\r\n          } else {\r\n            const txn = target.transaction;\r\n            const os = txn.objectStore(store.name);\r\n            createIndexes(os, store);\r\n          }\r\n        });\r\n      };\r\n    });\r\n  }\r\n\r\n  public static create<T extends Database<any>>(db: T) {\r\n    return this.INSTANCES.find((instance) => instance.name === db.name) ?? new IDB(db);\r\n  }\r\n\r\n  public static closeDatabases(preserve?: IDB) {\r\n    this.INSTANCES.forEach((storage) => {\r\n      if(preserve && preserve === storage) {\r\n        return;\r\n      }\r\n\r\n      const db = storage.db;\r\n      if(db) {\r\n        db.onclose = () => {};\r\n        db.close();\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default class IDBStorage<T extends Database<any>, StoreName extends string = T['stores'][0]['name']> {\r\n  private log: ReturnType<typeof logger>;\r\n  private storeName: T['stores'][0]['name'];\r\n  private idb: IDB;\r\n\r\n  constructor(db: T, storeName: typeof db['stores'][0]['name']) {\r\n    this.storeName = storeName;\r\n    this.log = logger(['IDB', db.name, storeName].join('-'));\r\n    this.idb = IDB.create(db);\r\n  }\r\n\r\n  /**\r\n   * ! WARNING ! function requires at least one opened connection\r\n   */\r\n  /* public static clearObjectStores() {\r\n    const storage = this.STORAGES[0];\r\n    this.closeDatabases(storage);\r\n\r\n    const names = Array.from(storage.db.objectStoreNames);\r\n    const promises = names.map((name) => storage.clear(name));\r\n    return Promise.all(promises);\r\n  } */\r\n\r\n  /* public static deleteDatabase() {\r\n    this.closeDatabases();\r\n\r\n    const storages = this.STORAGES;\r\n    const dbNames = Array.from(new Set(storages.map((storage) => storage.name)));\r\n    const promises = dbNames.map((dbName) => {\r\n      return new Promise<void>((resolve, reject) => {\r\n        const deleteRequest = indexedDB.deleteDatabase(dbName);\r\n\r\n        deleteRequest.onerror = () => {\r\n          reject();\r\n        };\r\n\r\n        deleteRequest.onsuccess = () => {\r\n          resolve();\r\n        };\r\n      });\r\n    });\r\n\r\n    return Promise.all(promises);\r\n  } */\r\n\r\n  public delete(entryName: string | string[], storeName?: StoreName): Promise<void> {\r\n    // return Promise.resolve();\r\n    if(!Array.isArray(entryName)) {\r\n      entryName = [].concat(entryName);\r\n    }\r\n\r\n    return this.getObjectStore('readwrite', (objectStore) => {\r\n      return (entryName as string[]).map((entryName) => objectStore.delete(entryName));\r\n    }, DEBUG ? 'delete: ' + entryName.join(', ') : '', storeName);\r\n  }\r\n\r\n  public clear(storeName?: StoreName): Promise<void> {\r\n    return this.getObjectStore('readwrite', (objectStore) => objectStore.clear(), DEBUG ? 'clear' : '', storeName);\r\n  }\r\n\r\n  public save(entryName: string | string[], value: any | any[], storeName?: StoreName) {\r\n    // const handleError = (error: Error) => {\r\n    //   this.log.error('save: transaction error:', entryName, value, db, error, error && error.name);\r\n    //   if((!error || error.name === 'InvalidStateError')/*  && false */) {\r\n    //     setTimeout(() => {\r\n    //       this.save(entryName, value);\r\n    //     }, 2e3);\r\n    //   } else {\r\n    //     //console.error('IndexedDB saveFile transaction error:', error, error && error.name);\r\n    //   }\r\n    // };\r\n\r\n    if(!Array.isArray(entryName)) {\r\n      entryName = [].concat(entryName);\r\n      value = [].concat(value);\r\n    }\r\n\r\n    return this.getObjectStore('readwrite', (objectStore) => {\r\n      return (entryName as string[]).map((entryName, idx) => objectStore.put(value[idx], entryName));\r\n    }, DEBUG ? 'save: ' + entryName.join(', ') : '', storeName);\r\n  }\r\n\r\n  // public saveFile(fileName: string, blob: Blob | Uint8Array) {\r\n  //   //return Promise.resolve(blobConstruct([blob]));\r\n  //   if(!(blob instanceof Blob)) {\r\n  //     blob = blobConstruct(blob);\r\n  //   }\r\n\r\n  //   return this.save(fileName, blob);\r\n  // }\r\n\r\n  /* public saveFileBase64(db: IDBDatabase, fileName: string, blob: Blob | any): Promise<Blob> {\r\n    if(this.getBlobSize(blob) > 10 * 1024 * 1024) {\r\n      return Promise.reject();\r\n    }\r\n\r\n    if(!(blob instanceof Blob)) {\r\n      var safeMimeType = blobSafeMimeType(blob.type || 'image/jpeg');\r\n      var address = 'data:' + safeMimeType + ';base64,' + bytesToBase64(blob);\r\n      return this.storagePutB64String(db, fileName, address).then(() => {\r\n        return blob;\r\n      });\r\n    }\r\n\r\n    try {\r\n      var reader = new FileReader();\r\n    } catch (e) {\r\n      this.storageIsAvailable = false;\r\n      return Promise.reject();\r\n    }\r\n\r\n    let promise = new Promise<Blob>((resolve, reject) => {\r\n      reader.onloadend = () => {\r\n        this.storagePutB64String(db, fileName, reader.result as string).then(() => {\r\n          resolve(blob);\r\n        }, reject);\r\n      }\r\n\r\n      reader.onerror = reject;\r\n    });\r\n\r\n\r\n    try {\r\n      reader.readAsDataURL(blob);\r\n    } catch (e) {\r\n      this.storageIsAvailable = false;\r\n      return Promise.reject();\r\n    }\r\n\r\n    return promise;\r\n  }\r\n\r\n  public storagePutB64String(db: IDBDatabase, fileName: string, b64string: string) {\r\n    try {\r\n      var objectStore = db.transaction([this.storeName], 'readwrite')\r\n        .objectStore(this.storeName);\r\n      var request = objectStore.put(b64string, fileName);\r\n    } catch(error) {\r\n      this.storageIsAvailable = false;\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n      request.onsuccess = function(event) {\r\n        resolve();\r\n      };\r\n\r\n      request.onerror = reject;\r\n    });\r\n  }\r\n\r\n  public getBlobSize(blob: any) {\r\n    return blob.size || blob.byteLength || blob.length;\r\n  } */\r\n\r\n  public get<T>(entryName: string[], storeName?: StoreName): Promise<T[]>;\r\n  public get<T>(entryName: string, storeName?: StoreName): Promise<T>;\r\n  public get<T>(entryName: string | string[], storeName?: StoreName): Promise<T> | Promise<T[]> {\r\n    // return Promise.reject();\r\n\r\n    if(!Array.isArray(entryName)) {\r\n      entryName = [].concat(entryName);\r\n    }\r\n\r\n    if(!entryName.length) {\r\n      return Promise.resolve([]) as any;\r\n    }\r\n\r\n    return this.getObjectStore<T>('readonly', (objectStore) => {\r\n      return (entryName as string[]).map((entryName) => objectStore.get(entryName));\r\n    }, DEBUG ? 'get: ' + entryName.join(', ') : '', storeName);\r\n  }\r\n\r\n  private getObjectStore<T>(\r\n    mode: IDBTransactionMode,\r\n    callback: (objectStore: IDBObjectStore) => IDBRequest | IDBRequest[],\r\n    log?: string,\r\n    storeName = this.storeName\r\n  ) {\r\n    let perf: number;\r\n\r\n    if(log) {\r\n      perf = performance.now();\r\n      this.log(log + ': start');\r\n    }\r\n\r\n    return this.idb.openDatabase().then((db) => {\r\n      return new Promise<T>((resolve, reject) => {\r\n        /* if(mode === 'readwrite') {\r\n          return;\r\n        } */\r\n\r\n        const transaction = db.transaction([storeName], mode);\r\n\r\n        const onError = () => {\r\n          clearTimeout(timeout);\r\n          reject(transaction.error);\r\n        };\r\n\r\n        // let resolved = false;\r\n        const onComplete = (/* what: string */) => {\r\n          clearTimeout(timeout);\r\n\r\n          if(log) {\r\n            this.log(log + ': end', performance.now() - perf/* , what */);\r\n          }\r\n\r\n          // if(resolved) {\r\n          //   return;\r\n          // }\r\n\r\n          // resolved = true;\r\n          const results = requests.map((r) => r.result);\r\n          resolve(isArray ? results : results[0]);\r\n        };\r\n\r\n        transaction.onerror = onError;\r\n\r\n        // * have to wait while clearing or setting something\r\n        const waitForTransactionComplete = mode === 'readwrite';\r\n        if(waitForTransactionComplete) {\r\n          transaction.oncomplete = () => onComplete(/* 'transaction' */);\r\n        }\r\n\r\n        const timeout = setTimeout(() => {\r\n          this.log.error('transaction not finished', transaction, log);\r\n        }, 10000);\r\n\r\n        /* transaction.addEventListener('abort', (e) => {\r\n          //handleError();\r\n          this.log.error('IndexedDB: transaction abort!', transaction.error);\r\n        }); */\r\n\r\n        const callbackResult = callback(transaction.objectStore(storeName));\r\n\r\n        const isArray = Array.isArray(callbackResult);\r\n        const requests: IDBRequest[] = isArray ? callbackResult : [].concat(callbackResult) as any;\r\n\r\n        if(waitForTransactionComplete) {\r\n          return;\r\n        }\r\n\r\n        const length = requests.length;\r\n        let left = length;\r\n\r\n        const onRequestFinished = () => {\r\n          if(transaction.error) {\r\n            return;\r\n          }\r\n\r\n          if(!--left) {\r\n            onComplete(/* 'requests' */);\r\n          }\r\n        };\r\n\r\n        for(let i = 0; i < length; ++i) {\r\n          const request = requests[i];\r\n          request.onerror = onError;\r\n          request.onsuccess = onRequestFinished;\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  public getAll<T>(storeName?: StoreName): Promise<T[]> {\r\n    return this.getObjectStore<T[]>('readonly', (objectStore) => objectStore.getAll(), DEBUG ? 'getAll' : '', storeName);\r\n  }\r\n\r\n  /* public getAllKeys(): Promise<Array<string>> {\r\n    console.time('getAllEntries');\r\n    return this.openDatabase().then((db) => {\r\n      var objectStore = db.transaction([this.storeName], 'readonly')\r\n        .objectStore(this.storeName);\r\n      var request = objectStore.getAllKeys();\r\n\r\n      return new Promise((resolve, reject) => {\r\n        request.onsuccess = function(event) {\r\n          // @ts-ignore\r\n          var result = event.target.result;\r\n          resolve(result);\r\n          console.timeEnd('getAllEntries');\r\n        }\r\n\r\n        request.onerror = reject;\r\n      });\r\n    });\r\n  } */\r\n\r\n  /* public isFileExists(fileName: string): Promise<boolean> {\r\n    console.time('isFileExists');\r\n    return this.openDatabase().then((db) => {\r\n      var objectStore = db.transaction([this.storeName], 'readonly')\r\n        .objectStore(this.storeName);\r\n      var request = objectStore.openCursor(fileName);\r\n\r\n      return new Promise((resolve, reject) => {\r\n        request.onsuccess = function(event) {\r\n          // @ts-ignore\r\n          var cursor = event.target.result;\r\n          resolve(!!cursor);\r\n          console.timeEnd('isFileExists');\r\n        }\r\n\r\n        request.onerror = reject;\r\n      });\r\n    });\r\n  } */\r\n\r\n  /* public getFileWriter(fileName: string, mimeType: string) {\r\n    var fakeWriter = FileManager.getFakeFileWriter(mimeType, (blob) => {\r\n      return this.saveFile(fileName, blob);\r\n    });\r\n\r\n    return Promise.resolve(fakeWriter);\r\n  } */\r\n}\r\n","export default function safeAssign<T>(object: T, fromObject: any) {\n  if(fromObject) {\n    for(const i in fromObject) {\n      if(fromObject[i] !== undefined) {\n        // @ts-ignore\n        object[i] = fromObject[i];\n      }\n    }\n  }\n\n  return object;\n}\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n *\r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport {Database} from '../../config/databases';\r\nimport DATABASE_STATE from '../../config/databases/state';\r\nimport {IS_FIREFOX} from '../../environment/userAgent';\r\nimport deepEqual from '../../helpers/object/deepEqual';\r\nimport IDBStorage from '../files/idb';\r\nimport {log, serviceMessagePort} from './index.service';\r\nimport {ServicePushPingTaskPayload} from './serviceMessagePort';\r\n\r\nconst ctx = self as any as ServiceWorkerGlobalScope;\r\nconst defaultBaseUrl = location.protocol + '//' + location.hostname + location.pathname.split('/').slice(0, -1).join('/') + '/';\r\n\r\nexport type PushNotificationObject = {\r\n  loc_key: string,\r\n  loc_args: string[],\r\n  // user_id: number, // should be number\r\n  custom: {\r\n    channel_id?: string, // should be number\r\n    chat_id?: string, // should be number\r\n    from_id?: string, // should be number\r\n    msg_id: string,\r\n    peerId?: string // should be number\r\n  },\r\n  sound?: string,\r\n  random_id: number,\r\n  badge?: string, // should be number\r\n  description: string,\r\n  mute: string, // should be number\r\n  title: string,\r\n\r\n  action?: 'mute1d' | 'push_settings', // will be set before postMessage to main thread\r\n};\r\n\r\nclass SomethingGetter<T extends Database<any>, Storage extends Record<string, any>> {\r\n  private cache: Partial<Storage> = {};\r\n  private storage: IDBStorage<T>;\r\n\r\n  constructor(\r\n    db: T,\r\n    storeName: typeof db['stores'][number]['name'],\r\n    private defaults: {\r\n      [Property in keyof Storage]: ((value: Storage[Property]) => Storage[Property]) | Storage[Property]\r\n    }\r\n  ) {\r\n    this.storage = new IDBStorage<T>(db, storeName);\r\n  }\r\n\r\n  public async get<T extends keyof Storage>(key: T) {\r\n    if(this.cache[key] !== undefined) {\r\n      return this.cache[key];\r\n    }\r\n\r\n    let value: Storage[T];\r\n    try {\r\n      value = await this.storage.get(key as string);\r\n    } catch(err) {\r\n\r\n    }\r\n\r\n    if(this.cache[key] !== undefined) {\r\n      return this.cache[key];\r\n    }\r\n\r\n    if(value === undefined) {\r\n      const callback = this.defaults[key];\r\n      value = typeof(callback) === 'function' ? callback() : callback;\r\n    }\r\n\r\n    return this.cache[key] = value;\r\n  }\r\n\r\n  public async set<T extends keyof Storage>(key: T, value: Storage[T]) {\r\n    const cached = this.cache[key] ?? this.defaults[key];\r\n    if(deepEqual(cached, value)) {\r\n      return;\r\n    }\r\n\r\n    this.cache[key] = value;\r\n\r\n    try {\r\n      this.storage.save(key as string, value);\r\n    } catch(err) {\r\n\r\n    }\r\n  }\r\n}\r\n\r\ntype PushStorage = {\r\n  push_mute_until: number,\r\n  push_lang: Partial<ServicePushPingTaskPayload['lang']>\r\n  push_settings: Partial<ServicePushPingTaskPayload['settings']>\r\n};\r\n\r\nconst getter = new SomethingGetter<typeof DATABASE_STATE, PushStorage>(DATABASE_STATE, 'session', {\r\n  push_mute_until: 0,\r\n  push_lang: {\r\n    push_message_nopreview: 'You have a new message',\r\n    push_action_mute1d: 'Mute for 24H',\r\n    push_action_settings: 'Settings'\r\n  },\r\n  push_settings: {}\r\n});\r\n\r\nctx.addEventListener('push', (event) => {\r\n  const obj: PushNotificationObject = event.data.json();\r\n  log('push', obj);\r\n\r\n  let hasActiveWindows = false;\r\n  const checksPromise = Promise.all([\r\n    getter.get('push_mute_until'),\r\n    ctx.clients.matchAll({type: 'window'})\r\n  ]).then((result) => {\r\n    const [muteUntil, clientList] = result;\r\n\r\n    log('matched clients', clientList);\r\n    hasActiveWindows = clientList.length > 0;\r\n    if(hasActiveWindows) {\r\n      throw 'Supress notification because some instance is alive';\r\n    }\r\n\r\n    const nowTime = Date.now();\r\n    if(userInvisibleIsSupported() &&\r\n        muteUntil &&\r\n        nowTime < muteUntil) {\r\n      throw `Supress notification because mute for ${Math.ceil((muteUntil - nowTime) / 60000)} min`;\r\n    }\r\n\r\n    if(!obj.badge) {\r\n      throw 'No badge?';\r\n    }\r\n  });\r\n\r\n  checksPromise.catch((reason) => {\r\n    log(reason);\r\n  });\r\n\r\n  const notificationPromise = checksPromise.then(() => {\r\n    return Promise.all([getter.get('push_settings'), getter.get('push_lang')])\r\n  }).then((result) => {\r\n    return fireNotification(obj, result[0], result[1]);\r\n  });\r\n\r\n  const closePromise = notificationPromise.catch(() => {\r\n    log('Closing all notifications on push', hasActiveWindows);\r\n    if(userInvisibleIsSupported() || hasActiveWindows) {\r\n      return closeAllNotifications();\r\n    }\r\n\r\n    return ctx.registration.showNotification('Telegram', {\r\n      tag: 'unknown_peer'\r\n    }).then(() => {\r\n      if(hasActiveWindows) {\r\n        return closeAllNotifications();\r\n      }\r\n\r\n      setTimeout(() => closeAllNotifications(), hasActiveWindows ? 0 : 100);\r\n    }).catch((error) => {\r\n      log.error('Show notification error', error);\r\n    });\r\n  });\r\n\r\n  event.waitUntil(closePromise);\r\n});\r\n\r\nctx.addEventListener('notificationclick', (event) => {\r\n  const notification = event.notification;\r\n  log('On notification click: ', notification.tag);\r\n  notification.close();\r\n\r\n  const action = event.action as PushNotificationObject['action'];\r\n  if(action === 'mute1d' && userInvisibleIsSupported()) {\r\n    log('[SW] mute for 1d');\r\n    getter.set('push_mute_until', Date.now() + 86400e3);\r\n    return;\r\n  }\r\n\r\n  const data: PushNotificationObject = notification.data;\r\n  if(!data) {\r\n    return;\r\n  }\r\n\r\n  const promise = ctx.clients.matchAll({\r\n    type: 'window'\r\n  }).then((clientList) => {\r\n    data.action = action;\r\n    pendingNotification = data;\r\n    for(let i = 0; i < clientList.length; i++) {\r\n      const client = clientList[i];\r\n      if('focus' in client) {\r\n        client.focus();\r\n        serviceMessagePort.invokeVoid('pushClick', pendingNotification, client);\r\n        pendingNotification = undefined;\r\n        return;\r\n      }\r\n    }\r\n\r\n    if(ctx.clients.openWindow) {\r\n      return getter.get('push_settings').then((settings) => {\r\n        return ctx.clients.openWindow(settings.baseUrl || defaultBaseUrl);\r\n      });\r\n    }\r\n  }).catch((error) => {\r\n    log.error('Clients.matchAll error', error);\r\n  })\r\n\r\n  event.waitUntil(promise);\r\n});\r\n\r\nctx.addEventListener('notificationclose', onCloseNotification);\r\n\r\nconst notifications: Set<Notification> = new Set();\r\nlet pendingNotification: PushNotificationObject;\r\nfunction pushToNotifications(notification: Notification) {\r\n  if(!notifications.has(notification)) {\r\n    notifications.add(notification);\r\n    // @ts-ignore\r\n    notification.onclose = onCloseNotification;\r\n  }\r\n}\r\n\r\nfunction onCloseNotification(event: NotificationEvent) {\r\n  removeFromNotifications(event.notification)\r\n}\r\n\r\nfunction removeFromNotifications(notification: Notification) {\r\n  notifications.delete(notification);\r\n}\r\n\r\nexport function closeAllNotifications() {\r\n  for(const notification of notifications) {\r\n    try {\r\n      notification.close();\r\n    } catch(e) {}\r\n  }\r\n\r\n  let promise: Promise<void>;\r\n  if('getNotifications' in ctx.registration) {\r\n    promise = ctx.registration.getNotifications({}).then((notifications) => {\r\n      for(let i = 0, len = notifications.length; i < len; ++i) {\r\n        try {\r\n          notifications[i].close();\r\n        } catch(e) {}\r\n      }\r\n    }).catch((error) => {\r\n      log.error('Offline register SW error', error);\r\n    });\r\n  } else {\r\n    promise = Promise.resolve();\r\n  }\r\n\r\n  notifications.clear();\r\n\r\n  return promise;\r\n}\r\n\r\nfunction userInvisibleIsSupported() {\r\n  return IS_FIREFOX;\r\n}\r\n\r\nfunction fireNotification(obj: PushNotificationObject, settings: PushStorage['push_settings'], lang: PushStorage['push_lang']) {\r\n  const icon = 'assets/img/logo_filled_rounded.png';\r\n  let title = obj.title || 'Telegram';\r\n  let body = obj.description || '';\r\n  let peerId: string;\r\n\r\n  if(obj.custom) {\r\n    if(obj.custom.channel_id) {\r\n      peerId = '' + -obj.custom.channel_id;\r\n    } else if(obj.custom.chat_id) {\r\n      peerId = '' + -obj.custom.chat_id;\r\n    } else {\r\n      peerId = obj.custom.from_id || '';\r\n    }\r\n  }\r\n\r\n  obj.custom.peerId = '' + peerId;\r\n  let tag = 'peer' + peerId;\r\n\r\n  if(settings && settings.nopreview) {\r\n    title = 'Telegram';\r\n    body = lang.push_message_nopreview;\r\n    tag = 'unknown_peer';\r\n  }\r\n\r\n  log('show notify', title, body, icon, obj);\r\n\r\n  const actions: (Omit<NotificationAction, 'action'> & {action: PushNotificationObject['action']})[] = [{\r\n    action: 'mute1d',\r\n    title: lang.push_action_mute1d\r\n  }/* , {\r\n    action: 'push_settings',\r\n    title: lang.push_action_settings || 'Settings'\r\n  } */];\r\n\r\n  const notificationPromise = ctx.registration.showNotification(title, {\r\n    body,\r\n    icon,\r\n    tag,\r\n    data: obj,\r\n    actions\r\n  });\r\n\r\n  return notificationPromise.then((event) => {\r\n    // @ts-ignore\r\n    if(event?.notification) {\r\n      // @ts-ignore\r\n      pushToNotifications(event.notification);\r\n    }\r\n  }).catch((error) => {\r\n    log.error('Show notification promise', error);\r\n  });\r\n}\r\n\r\nexport function onPing(payload: ServicePushPingTaskPayload, source?: MessageEventSource) {\r\n  if(pendingNotification && source) {\r\n    serviceMessagePort.invokeVoid('pushClick', pendingNotification, source);\r\n    pendingNotification = undefined;\r\n  }\r\n\r\n  if(payload.lang) {\r\n    getter.set('push_lang', payload.lang);\r\n  }\r\n\r\n  if(payload.settings) {\r\n    getter.set('push_settings', payload.settings);\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport type {Database} from '.';\r\nimport type {IDBIndex} from '../../lib/files/idb';\r\n\r\nconst DATABASE_STATE: Database<'session' | 'stickerSets' | 'users' | 'chats' | 'messages' | 'dialogs'> = {\r\n  name: 'tweb',\r\n  version: 7,\r\n  stores: [{\r\n    name: 'session'\r\n  }, {\r\n    name: 'stickerSets'\r\n  }, {\r\n    name: 'users'\r\n  }, {\r\n    name: 'chats'\r\n  }, {\r\n    name: 'dialogs'\r\n    // indexes: [\r\n    //   ...(new Array(20 + 2).fill(0)).map((_, idx) => {\r\n    //     const name = `index_${idx}`;\r\n    //     const index: IDBIndex = {\r\n    //       indexName: name,\r\n    //       keyPath: name,\r\n    //       objectParameters: {}\r\n    //     };\r\n\r\n    //     return index\r\n    //   })\r\n    // ]\r\n  }, {\r\n    name: 'messages'\r\n  }]\r\n};\r\n\r\nexport default DATABASE_STATE;\r\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport type {WebPushApiManager} from '../mtproto/webPushApiManager';\nimport type {PushNotificationObject} from './push';\nimport type {MyUploadFile} from '../mtproto/apiFileManager';\nimport SuperMessagePort from '../mtproto/superMessagePort';\nimport {MOUNT_CLASS_TO} from '../../config/debug';\n\nexport type ServicePushPingTaskPayload = {\n  localNotifications: boolean,\n  lang: {\n    push_action_mute1d: string\n    push_action_settings: string\n    push_message_nopreview: string\n  },\n  settings: WebPushApiManager['settings']\n};\n\nexport type ServiceRequestFilePartTaskPayload = {\n  docId: DocId,\n  dcId: number,\n  offset: number,\n  limit: number\n};\n\nexport type ServiceDownloadTaskPayload = {\n  headers: any,\n  id: string\n};\n\nexport type ServiceEvent = {\n  port: (payload: void, source: MessageEventSource, event: MessageEvent) => void\n};\n\nexport default class ServiceMessagePort<Master extends boolean = false> extends SuperMessagePort<{\n  // from main thread to service worker\n  notificationsClear: () => void,\n  toggleStorages: (payload: {enabled: boolean, clearWrite: boolean}) => void,\n  pushPing: (payload: ServicePushPingTaskPayload, source: MessageEventSource, event: MessageEvent) => void,\n  hello: (payload: void, source: MessageEventSource, event: MessageEvent) => void,\n\n  // from mtproto worker\n  download: (payload: ServiceDownloadTaskPayload) => void,\n  downloadChunk: (payload: {id: ServiceDownloadTaskPayload['id'], chunk: Uint8Array}) => void\n  downloadFinalize: (payload: ServiceDownloadTaskPayload['id']) => void,\n  downloadCancel: (payload: ServiceDownloadTaskPayload['id']) => void\n}, {\n  // to main thread\n  pushClick: (payload: PushNotificationObject) => void,\n  hello: (payload: void, source: MessageEventSource) => void,\n\n  // to mtproto worker\n  requestFilePart: (payload: ServiceRequestFilePartTaskPayload) => Promise<MyUploadFile> | MyUploadFile\n} & ServiceEvent, Master> {\n  constructor() {\n    super('SERVICE');\n\n    MOUNT_CLASS_TO && (MOUNT_CLASS_TO.serviceMessagePort = this);\n  }\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport type {ServiceDownloadTaskPayload} from './serviceMessagePort';\nimport type ServiceMessagePort from './serviceMessagePort';\nimport deferredPromise, {CancellablePromise} from '../../helpers/cancellablePromise';\nimport makeError from '../../helpers/makeError';\nimport pause from '../../helpers/schedulers/pause';\n\ntype DownloadType = Uint8Array;\ntype DownloadItem = ServiceDownloadTaskPayload & {\n  // transformStream: TransformStream<DownloadType, DownloadType>,\n  readableStream: ReadableStream<DownloadType>,\n  // writableStream: WritableStream<DownloadType>,\n  // writer: WritableStreamDefaultWriter<DownloadType>,\n  // controller: TransformStreamDefaultController<DownloadType>,\n  controller: ReadableStreamController<Uint8Array>,\n  promise: CancellablePromise<void>,\n  // downloadPromise: Promise<void>,\n  used?: boolean\n};\nconst downloadMap: Map<string, DownloadItem> = new Map();\nconst DOWNLOAD_ERROR = makeError('UNKNOWN');\nconst DOWNLOAD_TEST = false;\n\n(self as any).downloadMap = downloadMap;\n\ntype A = Parameters<ServiceMessagePort<false>['addMultipleEventsListeners']>[0];\n\nconst events: A = {\n  download: (payload) => {\n    const {id} = payload;\n    if(downloadMap.has(id)) {\n      return Promise.reject(DOWNLOAD_ERROR);\n    }\n\n    // const y = (20 * 1024 * 1024) / payload.limitPart;\n    // const strategy = new ByteLengthQueuingStrategy({highWaterMark: y});\n    // let controller: TransformStreamDefaultController<DownloadType>;\n    const strategy = new CountQueuingStrategy({highWaterMark: 1});\n    // const transformStream = new TransformStream<DownloadType, DownloadType>(/* {\n    //   start: (_controller) => controller = _controller,\n    // },  */undefined, strategy, strategy);\n\n    // const {readable, writable} = transformStream;\n    // const writer = writable.getWriter();\n\n    const promise = deferredPromise<void>();\n    promise.then(() => {\n      setTimeout(() => {\n        downloadMap.delete(id);\n      }, 5e3);\n    }, () => {\n      downloadMap.delete(id);\n    });\n\n    // writer.closed.then(promise.resolve, promise.reject);\n\n    let controller: ReadableStreamController<any>;\n    const readable = new ReadableStream({\n      start: (_controller) => {\n        controller = _controller;\n      },\n\n      cancel: (reason) => {\n        promise.reject(DOWNLOAD_ERROR);\n      }\n    }, strategy);\n\n    // writer.closed.catch(noop).finally(() => {\n    //   log.error('closed writer');\n    //   onEnd();\n    // });\n\n    // const downloadPromise = writer.closed.catch(() => {throw DOWNLOAD_ERROR;});\n    const item: DownloadItem = {\n      ...payload,\n      // transformStream,\n      readableStream: readable,\n      // writableStream: writable,\n      // writer,\n      // downloadPromise,\n      promise,\n      controller\n    };\n\n    downloadMap.set(id, item);\n\n    // return downloadPromise;\n    return promise.catch(() => {throw DOWNLOAD_ERROR});\n  },\n\n  downloadChunk: ({id, chunk}) => {\n    const item = downloadMap.get(id);\n    if(!item) {\n      return Promise.reject();\n    }\n\n    // return item.controller.enqueue(chunk);\n    // return item.writer.write(chunk);\n    return item.controller.enqueue(chunk);\n  },\n\n  downloadFinalize: (id) => {\n    const item = downloadMap.get(id);\n    if(!item) {\n      return Promise.reject();\n    }\n\n    item.promise.resolve();\n    // return item.controller.terminate();\n    // return item.writer.close();\n    return item.controller.close();\n  },\n\n  downloadCancel: (id) => {\n    const item = downloadMap.get(id);\n    if(!item) {\n      return;\n    }\n\n    item.promise.reject();\n    // return item.controller.error();\n    // return item.writer.abort();\n    return item.controller.error();\n  }\n};\n\nexport default function handleDownload(serviceMessagePort: ServiceMessagePort<false>) {\n  serviceMessagePort.addMultipleEventsListeners(events);\n\n  return {\n    onDownloadFetch,\n    onClosedWindows: cancelAllDownloads\n  };\n}\n\nfunction onDownloadFetch(event: FetchEvent, params: string) {\n  const promise = pause(100).then(() => {\n    const item = downloadMap.get(params);\n    if(!item || (item.used && !DOWNLOAD_TEST)) {\n      return;\n    }\n\n    item.used = true;\n    const stream = item.readableStream;\n    const response = new Response(stream, {headers: item.headers});\n    return response;\n  });\n\n  event.respondWith(promise);\n}\n\nfunction cancelAllDownloads() {\n  if(downloadMap.size) {\n    for(const [id, item] of downloadMap) {\n      // item.writer.abort().catch(noop);\n      item.controller.error();\n    }\n  }\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\n                 \n                                   \n         \n\nimport {logger, LogTypes} from '../logger';\nimport {CACHE_ASSETS_NAME, requestCache} from './cache';\nimport onStreamFetch from './stream';\nimport {closeAllNotifications, onPing} from './push';\nimport CacheStorageController from '../files/cacheStorage';\nimport {IS_SAFARI} from '../../environment/userAgent';\nimport ServiceMessagePort from './serviceMessagePort';\nimport listenMessagePort from '../../helpers/listenMessagePort';\nimport {getWindowClients} from '../../helpers/context';\nimport {MessageSendPort} from '../mtproto/superMessagePort';\nimport handleDownload from './download';\n\nexport const log = logger('SW', LogTypes.Error | LogTypes.Debug | LogTypes.Log | LogTypes.Warn, true);\nconst ctx = self as any as ServiceWorkerGlobalScope;\n\n                  \nlet _mtprotoMessagePort: MessagePort;\nexport const getMtprotoMessagePort = () => _mtprotoMessagePort;\n\nconst sendMessagePort = (source: MessageSendPort) => {\n  const channel = new MessageChannel();\n  serviceMessagePort.attachPort(_mtprotoMessagePort = channel.port1);\n  serviceMessagePort.invokeVoid('port', undefined, source, [channel.port2]);\n};\n\nconst sendMessagePortIfNeeded = (source: MessageSendPort) => {\n  if(!connectedWindows.size && !_mtprotoMessagePort) {\n    log('sending message port for mtproto');\n    sendMessagePort(source);\n  }\n};\n\nconst onWindowConnected = (source: WindowClient) => {\n  log('window connected', source.id, 'windows before', connectedWindows.size);\n\n  if(source.frameType === 'none') {\n    log.warn('maybe a bugged Safari starting window', source.id);\n    return;\n  }\n\n  log('windows', Array.from(connectedWindows));\n  serviceMessagePort.invokeVoid('hello', undefined, source);\n  sendMessagePortIfNeeded(source);\n  connectedWindows.set(source.id, source);\n};\n\nexport const serviceMessagePort = new ServiceMessagePort<false>();\nserviceMessagePort.addMultipleEventsListeners({\n  notificationsClear: closeAllNotifications,\n\n  toggleStorages: ({enabled, clearWrite}) => {\n    CacheStorageController.toggleStorage(enabled, clearWrite);\n  },\n\n  pushPing: (payload, source) => {\n    onPing(payload, source);\n  },\n\n  hello: (payload, source) => {\n    onWindowConnected(source as any as WindowClient);\n  }\n});\n\nconst {\n  onDownloadFetch,\n  onClosedWindows: onDownloadClosedWindows\n} = handleDownload(serviceMessagePort);\n\n// * service worker can be killed, so won't get 'hello' event\ngetWindowClients().then((windowClients) => {\n  log(`got ${windowClients.length} windows from the start`);\n  windowClients.forEach((windowClient) => {\n    onWindowConnected(windowClient);\n  });\n});\n\nconst connectedWindows: Map<string, WindowClient> = new Map();\n(self as any).connectedWindows = connectedWindows;\nlistenMessagePort(serviceMessagePort, undefined, (source) => {\n  log('something has disconnected', source);\n  const isWindowClient = source instanceof WindowClient;\n  if(!isWindowClient || !connectedWindows.has(source.id)) {\n    log.warn('it is not a window');\n    return;\n  }\n\n  connectedWindows.delete(source.id);\n  log('window disconnected, left', connectedWindows.size);\n  if(!connectedWindows.size) {\n    log.warn('no windows left');\n\n    if(_mtprotoMessagePort) {\n      serviceMessagePort.detachPort(_mtprotoMessagePort);\n      _mtprotoMessagePort = undefined;\n    }\n\n    onDownloadClosedWindows();\n  }\n});\n         \n\nconst onFetch = (event: FetchEvent): void => {\n               \n  if(\n    !IS_SAFARI &&\n    event.request.url.indexOf(location.origin + '/') === 0 &&\n    event.request.url.match(/\\.(js|css|jpe?g|json|wasm|png|mp3|svg|tgs|ico|woff2?|ttf|webmanifest?)(?:\\?.*)?$/)\n  ) {\n    return event.respondWith(requestCache(event));\n  }\n           \n\n  try {\n    // const [, url, scope, params] = /http[:s]+\\/\\/.*?(\\/(.*?)(?:$|\\/(.*)$))/.exec(event.request.url) || [];\n    const [scope, params] = event.request.url.split('/').slice(-2);\n\n    // log.debug('[fetch]:', event);\n\n    switch(scope) {\n      case 'stream': {\n        onStreamFetch(event, params);\n        break;\n      }\n\n      case 'download': {\n        onDownloadFetch(event, params);\n        break;\n      }\n\n      case 'ping': {\n        event.respondWith(new Response('pong'));\n        break;\n      }\n    }\n  } catch(err) {\n    log.error('fetch error', err);\n    event.respondWith(new Response('', {\n      status: 500,\n      statusText: 'Internal Server Error',\n      headers: {'Cache-Control': 'no-cache'}\n    }));\n  }\n};\n\nconst onChangeState = () => {\n  ctx.onfetch = onFetch;\n};\n\nctx.addEventListener('install', (event) => {\n  log('installing');\n  event.waitUntil(ctx.skipWaiting().then(() => log('skipped waiting'))); // Activate worker immediately\n});\n\nctx.addEventListener('activate', (event) => {\n  log('activating', ctx);\n  event.waitUntil(ctx.caches.delete(CACHE_ASSETS_NAME).then(() => log('cleared assets cache')));\n  event.waitUntil(ctx.clients.claim().then(() => log('claimed clients')));\n});\n\n// ctx.onerror = (error) => {\n//   log.error('error:', error);\n// };\n\n// ctx.onunhandledrejection = (error) => {\n//   log.error('onunhandledrejection:', error);\n// };\n\nctx.onoffline = ctx.ononline = onChangeState;\n\nonChangeState();\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport type SuperMessagePort from '../lib/mtproto/superMessagePort';\r\nimport ctx from '../environment/ctx';\r\n\r\nexport default function listenMessagePort(\r\n  messagePort: SuperMessagePort<any, any, any>,\r\n  onConnect?: (source: MessageEventSource) => void,\r\n  onDisconnect?: (source: MessageEventSource) => void\r\n) {\r\n  const attachPort = (listenPort: any, sendPort: any) => {\r\n    messagePort.attachListenPort(listenPort);\r\n    sendPort && messagePort.attachSendPort(sendPort);\r\n    onConnect?.(listenPort);\r\n  };\r\n\r\n  messagePort.setOnPortDisconnect(onDisconnect);\r\n\r\n  if(typeof(SharedWorkerGlobalScope) !== 'undefined') {\r\n    (ctx as any as SharedWorkerGlobalScope).addEventListener('connect', (e) => attachPort(e.source, e.source));\r\n  } else if(typeof(ServiceWorkerGlobalScope) !== 'undefined') {\r\n    attachPort(ctx, null);\r\n  } else {\r\n    attachPort(ctx, ctx);\r\n  }\r\n}\r\n","export default function timeout(delay: number): Promise<Response> {\r\n  return new Promise(((resolve) => {\r\n    setTimeout(() => {\r\n      resolve(new Response('', {\r\n        status: 408,\r\n        statusText: 'Request timed out.'\r\n      }));\r\n    }, delay);\r\n  }));\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [437], () => (__webpack_require__(1901)))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".\" + \"063bd44858e28568a483\" + \".bundle.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t670: 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = this[\"webpackChunktweb\"] = this[\"webpackChunktweb\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["deferred","oldGetScript","oldLoadScript","queryMap","countMap","next","USER_AGENT","navigator","userAgent","IS_SAFARI","search","toLowerCase","indexOf","test","vendor","platform","maxTouchPoints","match","IS_FIREFOX","IS_SERVICE_WORKER","ServiceWorkerGlobalScope","self","IS_WEB_WORKER","WorkerGlobalScope","IS_WORKER","getWindowClients","clients","matchAll","includeUncontrolled","type","postMessage","listener","args","err","console","error","notifyServiceWorker","all","then","listeners","length","slice","forEach","bind","LogTypes","LOG_LEVELS","None","Error","Warn","Log","Debug","STYLES_SUPPORTED","LOGGER_STYLES","methods","logger","prefix","ignoreDebugReset","style","originalPrefix","originalStyle","log","method","logType","setPrefix","newPrefix","setLevel","level","reduce","acc","v","bindPrefix","pause","ms","Promise","resolve","setTimeout","ctx","CACHE_ASSETS_NAME","isCorrectResponse","response","ok","status","timeoutRace","promise","race","reject","noop","deferredPromise","deferredHelper","isFulfilled","isRejected","notify","notifyAll","lastNotify","callback","addNotifyListener","push","value","catch","finally","cancel","Object","assign","blobConstruct","blobParts","mimeType","Array","isArray","safeMimeType","blobSafeMimeType","Blob","MemoryWriter","constructor","size","saveFileCallback","this","bytes","Uint8Array","write","part","offset","endOffset","byteLength","newBytes","set","truncate","trim","finalize","saveToStorage","blob","getParts","replaceParts","parts","CacheStorageController","dbName","useStorage","STORAGES","openDatabase","openDbPromise","caches","open","delete","entryName","timeoutOperation","cache","deleteAll","get","save","put","getFile","fileName","makeError","saveFile","Response","headers","rejected","timeout","undefined","res","clearTimeout","prepareWriting","fileSize","getWriter","static","enabled","clearWrite","map","storage","deferredPromises","Map","cacheStorage","CHUNK_CACHED_TIME_HEADER","setInterval","keys","requests","filtered","timestamp","Date","now","request","url","has","promises","id","ignoreSearch","ignoreVary","mtprotoMessagePort","getMtprotoMessagePort","messagePort","taskId","streams","Stream","info","loadedOffsets","Set","destroy","getId","limitPart","STREAM_CHUNK_UPPER_LIMIT","STREAM_CHUNK_MIDDLE_LIMIT","destroyDebounced","fn","shouldRunFirst","shouldRunLast","waitingTimeout","waitingPromise","hadNewCall","invoke","_resolve","_reject","apply","debounce","_waitingTimeout","isDebounced","requestFilePartFromWorker","alignedOffset","limit","fromPreload","payload","docId","dcId","JSON","stringify","uploadFile","add","serviceMessagePort","bytesPromise","saveChunkToCache","preloadChunks","requestFilePartFromCache","key","getChunkKey","reader","FileReader","addEventListener","e","target","result","readBlobAs","readBlobAsArrayBuffer","buffer","readBlobAsUint8Array","requestFilePart","preloadChunk","end","alignOffset","requestRange","range","possibleResponse","statusText","responseForSafariFirstRange","Math","ceil","alignLimit","min","ab","location","base","deepEqual","x","y","tx","every","IDB","db","object","fromObject","i","safeAssign","name","storageIsAvailable","join","INSTANCES","isAvailable","createNew","createIndexes","os","store","indexNames","from","indexName","deleteIndex","indexes","index","contains","createIndex","keyPath","objectParameters","indexedDB","version","message","finished","onerror","onsuccess","event","calledNew","onclose","onabort","transaction","close","onversionchange","onupgradeneeded","warn","oldVersion","newVersion","stores","objectStoreNames","objectStore","createObjectStore","find","instance","preserve","IDBStorage","storeName","idb","create","concat","getObjectStore","clear","idx","mode","perf","performance","onError","onComplete","results","r","waitForTransactionComplete","oncomplete","callbackResult","left","onRequestFinished","getAll","defaultBaseUrl","protocol","hostname","pathname","split","getter","defaults","push_mute_until","push_lang","push_message_nopreview","push_action_mute1d","push_action_settings","push_settings","obj","data","json","hasActiveWindows","checksPromise","muteUntil","clientList","nowTime","userInvisibleIsSupported","badge","reason","notificationPromise","settings","lang","icon","peerId","title","body","description","custom","channel_id","chat_id","from_id","tag","nopreview","actions","action","registration","showNotification","notification","notifications","onCloseNotification","fireNotification","closePromise","closeAllNotifications","waitUntil","pendingNotification","client","focus","invokeVoid","openWindow","baseUrl","getNotifications","len","ServiceMessagePort","super","downloadMap","DOWNLOAD_ERROR","events","download","strategy","CountQueuingStrategy","highWaterMark","controller","readable","ReadableStream","start","_controller","item","readableStream","downloadChunk","chunk","enqueue","downloadFinalize","downloadCancel","onDownloadFetch","params","used","stream","respondWith","cancelAllDownloads","_mtprotoMessagePort","onWindowConnected","source","connectedWindows","frameType","channel","MessageChannel","attachPort","port1","port2","sendMessagePort","sendMessagePortIfNeeded","addMultipleEventsListeners","notificationsClear","toggleStorages","toggleStorage","pushPing","onPing","hello","onClosedWindows","onDownloadClosedWindows","handleDownload","windowClients","windowClient","onConnect","onDisconnect","listenPort","sendPort","attachListenPort","attachSendPort","setOnPortDisconnect","WindowClient","detachPort","listenMessagePort","onFetch","origin","file","fetch","clone","replace","random","requestCache","scope","header","chunks","ranges","parseRange","parse","decodeURIComponent","onStreamFetch","onChangeState","onfetch","skipWaiting","claim","onoffline","ononline","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","__webpack_exports__","O","chunkIds","priority","notFulfilled","Infinity","fulfilled","j","splice","d","definition","o","defineProperty","enumerable","f","chunkId","u","miniCssF","g","globalThis","Function","window","prop","prototype","hasOwnProperty","call","scriptUrl","importScripts","document","currentScript","src","scripts","getElementsByTagName","p","retries","realSrc","cacheBust","installedChunks","chunkLoadingGlobal","parentChunkLoadingFunction","moreModules","runtime","pop"],"sourceRoot":""}